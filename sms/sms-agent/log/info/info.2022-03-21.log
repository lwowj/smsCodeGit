2022-03-21 00:06:40 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin Application shutdown requested.
2022-03-21 00:06:40 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2022-03-21 00:06:40 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2022-03-21 00:06:40 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2022-03-21 00:06:40 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2022-03-21 00:06:40 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2022-03-21 00:06:40 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2022-03-21 00:06:40 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2022-03-21 00:06:40 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2022-03-21 00:06:40 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2022-03-21 00:06:40 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2022-03-21 00:06:40 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2022-03-21 00:06:40 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2022-03-21 11:27:57 INFO  main com.hero.sms.AgentApplication Starting AgentApplication on LAPTOP-L07PL5KH with PID 174328 (C:\work\workspaceSmsBf\sms\sms-agent\target\classes started by payBoo in C:\work\workspaceSmsBf\sms\sms-agent)
2022-03-21 11:27:57 INFO  main com.hero.sms.AgentApplication The following profiles are active: test
2022-03-21 11:28:00 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2022-03-21 11:28:00 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2022-03-21 11:28:01 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 819ms. Found 0 repository interfaces.
2022-03-21 11:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$e800429c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [com.hero.sms.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$a2c20ae7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.hero.sms.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$618bedd4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.hero.sms.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$74156258] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$bc3a3e65] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:02 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2022-03-21 11:28:02 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2022-03-21 11:28:02 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2022-03-21 11:28:02 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2022-03-21 11:28:02 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2022-03-21 11:28:02 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2022-03-21 11:28:02 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2022-03-21 11:28:02 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2022-03-21 11:28:02 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuMapper' of type [com.sun.proxy.$Proxy116] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuLimitMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuLimitMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuLimitServiceImpl' of type [com.hero.sms.service.impl.agent.AgentMenuLimitServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuServiceImpl' of type [com.hero.sms.service.impl.agent.AgentMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'codeMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'codeMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'codeServiceImpl' of type [com.hero.sms.service.impl.common.CodeServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserMapper' of type [com.sun.proxy.$Proxy124] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserLimitMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserLimitMapper' of type [com.sun.proxy.$Proxy127] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserLimitServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationUserLimitServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserMenuMapper' of type [com.sun.proxy.$Proxy129] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserMenuServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationUserMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentRechargeOrderMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentRechargeOrderMapper' of type [com.sun.proxy.$Proxy131] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentRechargeOrderServiceImpl' of type [com.hero.sms.service.impl.rechargeOrder.AgentRechargeOrderServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordMapper' of type [com.sun.proxy.$Proxy134] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'smsChannelMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'smsChannelMapper' of type [com.sun.proxy.$Proxy135] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sensitiveWordMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sensitiveWordMapper' of type [com.sun.proxy.$Proxy136] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sensitiveWordServiceImpl' of type [com.hero.sms.service.impl.message.SensitiveWordServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'smsGateService' of type [com.hero.sms.service.mq.SmsGateService] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'businessManageImpl' of type [com.hero.sms.service.impl.common.BusinessManageImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'commenReidsConfigure' of type [com.hero.sms.common.configure.CommenReidsConfigure$$EnhancerBySpringCGLIB$$35af6675] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'commenRedisTemplate' of type [org.springframework.data.redis.core.RedisTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'commenCacheRedisService' of type [com.hero.sms.service.impl.common.CommenCacheRedisService] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'smsChannelServiceImpl' of type [com.hero.sms.service.impl.channel.SmsChannelServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'exportRecordMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'exportRecordMapper' of type [com.sun.proxy.$Proxy145] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'exportRecordServiceImpl' of type [com.hero.sms.service.impl.common.ExportRecordServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordCheckinfoMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordCheckinfoMapper' of type [com.sun.proxy.$Proxy147] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordCheckinfoServiceImpl' of type [com.hero.sms.service.impl.message.SendRecordCheckinfoServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordServiceImpl' of type [com.hero.sms.service.impl.message.SendRecordServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'returnRecordMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'returnRecordMapper' of type [com.sun.proxy.$Proxy151] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'returnRecordServiceImpl' of type [com.hero.sms.service.impl.message.ReturnRecordServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'MQService' of type [com.hero.sms.service.mq.MQService] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentSystemConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentSystemConfigMapper' of type [com.sun.proxy.$Proxy154] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentSystemConfigServiceImpl' of type [com.hero.sms.service.impl.agent.AgentSystemConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationPropertyMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationPropertyMapper' of type [com.sun.proxy.$Proxy156] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationPropertyServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationPropertyServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationGroupMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationGroupMapper' of type [com.sun.proxy.$Proxy158] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationGroupServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationGroupServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'payChannelMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'payChannelMapper' of type [com.sun.proxy.$Proxy160] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'payChannelServiceImpl' of type [com.hero.sms.service.impl.channel.PayChannelServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'blackIpConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'blackIpConfigMapper' of type [com.sun.proxy.$Proxy162] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'blackIpConfigServiceImpl' of type [com.hero.sms.service.impl.common.BlackIpConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileBlackMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileBlackMapper' of type [com.sun.proxy.$Proxy164] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileBlackServiceImpl' of type [com.hero.sms.service.impl.message.MobileBlackServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileAreaMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileAreaMapper' of type [com.sun.proxy.$Proxy166] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileAreaServiceImpl' of type [com.hero.sms.service.impl.message.MobileAreaServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'areaCodeMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'areaCodeMapper' of type [com.sun.proxy.$Proxy168] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'areaCodeServiceImpl' of type [com.hero.sms.service.impl.channel.AreaCodeServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'databaseCache' of type [com.hero.sms.common.DatabaseCache] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'reportMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'reportMapper' of type [com.sun.proxy.$Proxy170] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'reportServiceImpl' of type [com.hero.sms.service.impl.message.ReportServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentServiceImpl' of type [com.hero.sms.service.impl.agent.AgentServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:07 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.hero.sms.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:10 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:28:11 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8008 (http)
2022-03-21 11:28:11 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8008"]
2022-03-21 11:28:11 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2022-03-21 11:28:11 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.27]
2022-03-21 11:28:11 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2022-03-21 11:28:11 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 14415 ms
2022-03-21 11:28:12 INFO  main com.hero.sms.common.xss.XssFilter ------------ xss filter init ------------
2022-03-21 11:28:14 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2022-03-21 11:28:14 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2022-03-21 11:28:14 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2022-03-21 11:28:14 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2022-03-21 11:28:15 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2022-03-21 11:28:15 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2022-03-21 11:28:15 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2022-03-21 11:28:15 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2022-03-21 11:28:15 INFO  main org.quartz.simpl.RAMJobStore RAMJobStore initialized.
2022-03-21 11:28:15 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2022-03-21 11:28:15 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2022-03-21 11:28:15 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2022-03-21 11:28:15 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@6bc08a77
2022-03-21 11:28:16 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2022-03-21 11:28:16 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2022-03-21 11:28:16 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Skipping initializing disabled plugin bean swagger v2.0
2022-03-21 11:28:16 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
2022-03-21 11:28:16 INFO  main org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
2022-03-21 11:28:16 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8008"]
2022-03-21 11:28:16 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8008 (http) with context path ''
2022-03-21 11:28:16 INFO  main com.hero.sms.AgentApplication Started AgentApplication in 20.117 seconds (JVM running for 23.462)
2022-03-21 11:28:16 INFO  main com.hero.sms.common.DatabaseCache 开始缓存字典
2022-03-21 11:28:16 INFO  main p6spy 2022-03-21 11:28:16 | 耗时 11 ms | SQL 语句：
SELECT ID, CODE, CREATE_TIME, ORDER_LEVEL, PARENT_CODE, IS_DELETE, NAME, DESCRIPTION, REMARK, SORT_CODE FROM code WHERE (IS_DELETE = '0');
2022-03-21 11:28:16 INFO  main com.hero.sms.common.DatabaseCache 缓存代理信息
2022-03-21 11:28:16 INFO  main p6spy 2022-03-21 11:28:16 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent;
2022-03-21 11:28:16 INFO  main com.hero.sms.common.DatabaseCache 缓存商户信息
2022-03-21 11:28:16 INFO  main p6spy 2022-03-21 11:28:16 | 耗时 2 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization;
2022-03-21 11:28:16 INFO  main com.hero.sms.common.DatabaseCache 缓存短信通道信息
2022-03-21 11:28:16 INFO  main p6spy 2022-03-21 11:28:16 | 耗时 1 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel;
2022-03-21 11:28:16 INFO  main com.hero.sms.common.DatabaseCache 缓存支付通道信息
2022-03-21 11:28:16 INFO  main p6spy 2022-03-21 11:28:16 | 耗时 1 ms | SQL 语句：
SELECT id, key1, key2, min_amount, cost, key5, key3, key4, weight, remark, encrypt_key, impl_full_class, netway_code, create_time, merch_no, request_url, state_code, sign_key, callBack_url, channel_name, pay_code, max_amount FROM t_pay_channel;
2022-03-21 11:28:16 INFO  main com.hero.sms.common.DatabaseCache 缓存IP黑名单信息
2022-03-21 11:28:16 INFO  main p6spy 2022-03-21 11:28:16 | 耗时 1 ms | SQL 语句：
SELECT Id, Black_Ip, IsAvailability, LImit_Project, Description, Create_User, Remark, Create_Date FROM t_black_ip_config WHERE (IsAvailability = '1');
2022-03-21 11:28:16 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号段区域信息
2022-03-21 11:28:17 INFO  main p6spy 2022-03-21 11:28:17 | 耗时 803 ms | SQL 语句：
SELECT Id, MobileNumber, MobileArea, Province_Code, PostCode, AreaCode, Create_Date, MobileType FROM mobile_area;
2022-03-21 11:28:21 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号码黑名单信息
2022-03-21 11:28:21 INFO  main p6spy 2022-03-21 11:28:21 | 耗时 8 ms | SQL 语句：
SELECT area, number FROM t_mobile_black;
2022-03-21 11:28:21 INFO  main com.hero.sms.common.DatabaseCache 缓存网关类型信息
2022-03-21 11:28:21 INFO  main com.hero.sms.common.DatabaseCache Begin-缓存地区列表
2022-03-21 11:28:21 INFO  main p6spy 2022-03-21 11:28:21 | 耗时 1 ms | SQL 语句：
SELECT id, extend, create_time, area_name, area_coding, out_area, in_area, order_num FROM t_area_code ORDER BY order_num ASC;
2022-03-21 11:28:21 INFO  main com.hero.sms.common.DatabaseCache End-地区列表缓存完成
2022-03-21 11:28:21 INFO  main com.hero.sms.common.DatabaseCache 字典缓存完成
2022-03-21 11:28:21 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2022-03-21 11:28:22 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2022-03-21 11:28:25 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2022-03-21 11:28:25 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2022-03-21 11:28:25 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2022-03-21 11:28:25 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner                                                       
2022-03-21 11:28:25 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner 短信平台启动完毕，地址：http://192.168.189.1:8008/login
2022-03-21 11:28:51 INFO  http-nio-8008-exec-3 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2022-03-21 11:28:51 INFO  http-nio-8008-exec-3 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2022-03-21 11:28:51 INFO  http-nio-8008-exec-3 org.springframework.web.servlet.DispatcherServlet Completed initialization in 22 ms
2022-03-21 11:28:51 INFO  http-nio-8008-exec-3 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2022-03-21 11:28:53 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:28:53 | 耗时 9 ms | SQL 语句：
SELECT id, agent_id, approve_state_code, system_name, create_time, remark, system_url, system_logo_url FROM t_agent_system_config WHERE (system_url = '192.168.189.1' AND approve_state_code = '2');
2022-03-21 11:28:53 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:28:53 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, approve_state_code, system_name, create_time, remark, system_url, system_logo_url FROM t_agent_system_config WHERE (system_url = '192.168.189.1' AND approve_state_code = '2');
2022-03-21 11:29:14 INFO  http-nio-8008-exec-5 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_loginBehavior192.168.189.1]，描述为 [登录行为验证] 的接口
2022-03-21 11:29:15 INFO  http-nio-8008-exec-7 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_login192.168.189.1]，描述为 [登录接口] 的接口
2022-03-21 11:29:15 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:29:15 | 耗时 17 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION) VALUES ('com.hero.sms.controller.LoginController.login()', '2022-03-21T11:29:15.481+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 110, ' username: "vagent" password: "保密" verifyCode: "tkqbf" goologoVerifyCode: "" sessionToken: "2de4c56d11c1c68c0c1b65d86861a609" behaviorCheckToken: "86b58d4f0eac5fc9d1845ec81a7ef1c6" verifyInfoToken: "E6FD0027B0ECF76FE94F40C9FF0010FF" rememberMe: "false" request: org.apache.shiro.web.servlet.ShiroHttpServletRequest@1faa99c3', '登录');
2022-03-21 11:29:33 INFO  http-nio-8008-exec-3 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_loginBehavior192.168.189.1]，描述为 [登录行为验证] 的接口
2022-03-21 11:29:34 INFO  http-nio-8008-exec-2 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 2 次访问key为 [limit_login192.168.189.1]，描述为 [登录接口] 的接口
2022-03-21 11:29:34 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:29:34 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:29:34 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:29:34 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, approve_state_code, system_name, create_time, remark, system_url, system_logo_url FROM t_agent_system_config WHERE (agent_id = 35 AND approve_state_code = '2');
2022-03-21 11:29:34 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:29:34 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:29:34 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:29:34 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:29:34 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:29:34 | 耗时 3 ms | SQL 语句：
UPDATE t_agent SET Google_Key = '', Cash_Amount = 1200, Description = '', Remark = '169.254.130.216', Agent_Password = '036de319cfeff912ab2d6e2d6b4a7ba4', Last_Login_IP = '内网IP|0|0|内网IP|内网IP', Level_Code = '1', Available_Amount = 4842073, Login_IP = '192.168.189.1', EMail = '', Need_Bind_Google_Key = 0, Create_Date = '2020-03-31T15:41:25.000+0800', QQ = '', Agent_Account = 'vagent', Amount = 1100, Quota_Amount = 0, Agent_Name = '正式商户棋牌代理', Login_Faild_Count = 0, Data_MD5 = '2F3BCDEFDCB06E4813B5199D96E9D645', Last_Login_Time = '2022-03-20 23:10:13', Phone_Number = '', Day_Limit = 0, Send_Sms_Total = 484139, Create_User = 'admin', State_Code = '1', Pay_Password = '4297F44B13955235245B2497399D7A93' WHERE Id = 35;
2022-03-21 11:29:34 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:29:34 | 耗时 1 ms | SQL 语句：
UPDATE t_agent SET Last_Login_IP = '内网IP|0|0|内网IP|内网IP', Login_IP = '192.168.189.1', Last_Login_Time = '2022-03-21 11:29:34' WHERE (Agent_Account = 'vagent');
2022-03-21 11:29:34 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:29:34 | 耗时 6 ms | SQL 语句：
INSERT INTO t_agent_login_log (Agent_Account, TimeConsuming, Login_State, Local_Ip, Message) VALUES ('vagent', 208, 1, '192.168.189.1', '登录成功');
2022-03-21 11:29:34 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:29:34 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.LoginController.login()', '2022-03-21T11:29:34.741+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 233, ' username: "vagent" password: "保密" verifyCode: "mfdub" goologoVerifyCode: "" sessionToken: "30384424ddb59611c8b49c07ca31ece3" behaviorCheckToken: "7f810234a6c301ca51920e95ee3c707e" verifyInfoToken: "E6FD0027B0ECF76FE94F40C9FF0010FF" rememberMe: "false" request: org.apache.shiro.web.servlet.ShiroHttpServletRequest@6cd9bf62', '登录', 'vagent');
2022-03-21 11:29:34 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:29:34 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:29:34 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:29:34 | 耗时 20 ms | SQL 语句：
SELECT m.perms FROM t_agent_menu_limit l LEFT JOIN t_agent u ON (u.Id = l.AGENT_ID) LEFT JOIN t_agent_menu m ON (l.MENU_ID = m.MENU_ID) WHERE u.Agent_Account = 'vagent' AND m.perms IS NOT NULL AND m.perms <> '';
2022-03-21 11:29:34 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:29:34 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:29:35 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:29:35 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:29:35 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:29:35 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_agent_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT l.menu_id FROM t_agent_menu_limit l LEFT JOIN t_agent a ON (a.id = l.agent_id) WHERE a.Agent_Account = 'vagent') ORDER BY m.order_num;
2022-03-21 11:29:36 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:29:36 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:29:36 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:29:36 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:29:36 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:29:36 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_organization WHERE (Agent_Id = 35);
2022-03-21 11:29:36 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:29:36 | 耗时 1 ms | SQL 语句：
SELECT `org_code`, COUNT(1) AS total, COUNT(IF(`state` & 52 = `state`, 1, NULL)) AS successTotal, COUNT(IF(`state` = 8, 1, NULL)) AS failTotal, SUM(`agent_income_amount`) AS successAmount, SUM(`up_agent_income_amount`) AS upAgentSuccessAmount, SUM(`consume_amount`) AS consumeAmount FROM t_send_record WHERE (Agent_Id = 35 AND create_time >= '2022-03-21 00:00:00' AND `state` & 62 = `state`) GROUP BY org_code;
2022-03-21 11:29:36 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:29:36 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE Id = 35;
2022-03-21 11:29:36 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:29:36 | 耗时 9 ms | SQL 语句：
SELECT `org_code`, COUNT(1) AS total, COUNT(IF(`state` & 52 = `state`, 1, NULL)) AS successTotal, COUNT(IF(`state` = 8, 1, NULL)) AS failTotal, SUM(`agent_income_amount`) AS successAmount, SUM(`up_agent_income_amount`) AS upAgentSuccessAmount, SUM(`consume_amount`) AS consumeAmount FROM t_send_record WHERE (`up_agent_id` = 35 AND create_time >= '2022-03-21 00:00:00' AND `state` & 62 = `state`) GROUP BY org_code;
2022-03-21 11:29:37 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:29:37 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_agent_menu_limit l LEFT JOIN t_agent u ON (u.Id = l.AGENT_ID) LEFT JOIN t_agent_menu m ON (l.MENU_ID = m.MENU_ID) WHERE u.Agent_Account = 'vagent' AND m.perms IS NOT NULL AND m.perms <> '';
2022-03-21 11:29:38 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:29:38 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:29:38 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:29:38 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_organization WHERE (Agent_Id = 35);
2022-03-21 11:29:38 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:29:38 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization WHERE (Agent_Id = 35) ORDER BY Id DESC LIMIT 0,10;
2022-03-21 11:29:38 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:29:38 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.organization.OrganizationController.organizationList()', '2022-03-21T11:29:38.291+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 47, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" organization: "Organization(id=null, agentId=35, businessUserId=null, organizationName=null, organizationCode=null, contact=null, contactMobile=null, email=null, address=null, webUrl=null, amount=null, availableAmount=null, cashAmount=null, sendSmsTotal=null, status=null, approveStateCode=null, smsSign=null, chargesType=null, settlementType=null, smsApproveType=null, interfaceType=null, md5Key=null, bindIp=null, notifyUrl=null, dataMd5=null, description=null, remark=null, createUser=null, createDate=null)"', '商户列表', 'vagent');
2022-03-21 11:38:50 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin Application shutdown requested.
2022-03-21 11:38:50 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2022-03-21 11:38:50 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2022-03-21 11:38:50 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2022-03-21 11:38:50 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2022-03-21 11:38:50 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2022-03-21 11:38:50 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2022-03-21 11:38:50 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2022-03-21 11:38:50 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2022-03-21 11:38:50 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2022-03-21 11:38:50 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2022-03-21 11:38:50 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2022-03-21 11:38:50 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2022-03-21 11:39:54 INFO  main com.hero.sms.AgentApplication Starting AgentApplication on LAPTOP-L07PL5KH with PID 167408 (C:\work\workspaceSmsBf\sms\sms-agent\target\classes started by payBoo in C:\work\workspaceSmsBf\sms\sms-agent)
2022-03-21 11:39:54 INFO  main com.hero.sms.AgentApplication The following profiles are active: test
2022-03-21 11:39:57 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2022-03-21 11:39:57 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2022-03-21 11:39:58 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 739ms. Found 0 repository interfaces.
2022-03-21 11:39:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:39:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$a328b42a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:39:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:39:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:39:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:39:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [com.hero.sms.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$5dea7c75] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:39:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.hero.sms.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$1cb45f62] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:39:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:39:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.hero.sms.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$2f3dd3e6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:39:59 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$7762aff3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:00 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2022-03-21 11:40:00 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2022-03-21 11:40:00 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2022-03-21 11:40:00 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2022-03-21 11:40:00 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2022-03-21 11:40:00 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2022-03-21 11:40:00 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2022-03-21 11:40:00 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2022-03-21 11:40:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:00 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuMapper' of type [com.sun.proxy.$Proxy116] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuLimitMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuLimitMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuLimitServiceImpl' of type [com.hero.sms.service.impl.agent.AgentMenuLimitServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuServiceImpl' of type [com.hero.sms.service.impl.agent.AgentMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'codeMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'codeMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'codeServiceImpl' of type [com.hero.sms.service.impl.common.CodeServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserMapper' of type [com.sun.proxy.$Proxy124] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserLimitMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserLimitMapper' of type [com.sun.proxy.$Proxy127] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserLimitServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationUserLimitServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserMenuMapper' of type [com.sun.proxy.$Proxy129] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserMenuServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationUserMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentRechargeOrderMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentRechargeOrderMapper' of type [com.sun.proxy.$Proxy131] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentRechargeOrderServiceImpl' of type [com.hero.sms.service.impl.rechargeOrder.AgentRechargeOrderServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordMapper' of type [com.sun.proxy.$Proxy134] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'smsChannelMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'smsChannelMapper' of type [com.sun.proxy.$Proxy135] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sensitiveWordMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sensitiveWordMapper' of type [com.sun.proxy.$Proxy136] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sensitiveWordServiceImpl' of type [com.hero.sms.service.impl.message.SensitiveWordServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'smsGateService' of type [com.hero.sms.service.mq.SmsGateService] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'businessManageImpl' of type [com.hero.sms.service.impl.common.BusinessManageImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'commenReidsConfigure' of type [com.hero.sms.common.configure.CommenReidsConfigure$$EnhancerBySpringCGLIB$$f0d7d803] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'commenRedisTemplate' of type [org.springframework.data.redis.core.RedisTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'commenCacheRedisService' of type [com.hero.sms.service.impl.common.CommenCacheRedisService] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'smsChannelServiceImpl' of type [com.hero.sms.service.impl.channel.SmsChannelServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'exportRecordMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'exportRecordMapper' of type [com.sun.proxy.$Proxy145] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'exportRecordServiceImpl' of type [com.hero.sms.service.impl.common.ExportRecordServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordCheckinfoMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordCheckinfoMapper' of type [com.sun.proxy.$Proxy147] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordCheckinfoServiceImpl' of type [com.hero.sms.service.impl.message.SendRecordCheckinfoServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordServiceImpl' of type [com.hero.sms.service.impl.message.SendRecordServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'returnRecordMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'returnRecordMapper' of type [com.sun.proxy.$Proxy151] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'returnRecordServiceImpl' of type [com.hero.sms.service.impl.message.ReturnRecordServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'MQService' of type [com.hero.sms.service.mq.MQService] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentSystemConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentSystemConfigMapper' of type [com.sun.proxy.$Proxy154] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentSystemConfigServiceImpl' of type [com.hero.sms.service.impl.agent.AgentSystemConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationPropertyMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationPropertyMapper' of type [com.sun.proxy.$Proxy156] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationPropertyServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationPropertyServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationGroupMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationGroupMapper' of type [com.sun.proxy.$Proxy158] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationGroupServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationGroupServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'payChannelMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'payChannelMapper' of type [com.sun.proxy.$Proxy160] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'payChannelServiceImpl' of type [com.hero.sms.service.impl.channel.PayChannelServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'blackIpConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'blackIpConfigMapper' of type [com.sun.proxy.$Proxy162] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'blackIpConfigServiceImpl' of type [com.hero.sms.service.impl.common.BlackIpConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileBlackMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileBlackMapper' of type [com.sun.proxy.$Proxy164] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileBlackServiceImpl' of type [com.hero.sms.service.impl.message.MobileBlackServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileAreaMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileAreaMapper' of type [com.sun.proxy.$Proxy166] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileAreaServiceImpl' of type [com.hero.sms.service.impl.message.MobileAreaServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'areaCodeMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'areaCodeMapper' of type [com.sun.proxy.$Proxy168] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'areaCodeServiceImpl' of type [com.hero.sms.service.impl.channel.AreaCodeServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'databaseCache' of type [com.hero.sms.common.DatabaseCache] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'reportMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'reportMapper' of type [com.sun.proxy.$Proxy170] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'reportServiceImpl' of type [com.hero.sms.service.impl.message.ReportServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentServiceImpl' of type [com.hero.sms.service.impl.agent.AgentServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.hero.sms.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:40:07 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8008 (http)
2022-03-21 11:40:07 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8008"]
2022-03-21 11:40:07 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2022-03-21 11:40:07 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.27]
2022-03-21 11:40:07 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2022-03-21 11:40:07 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 12822 ms
2022-03-21 11:40:08 INFO  main com.hero.sms.common.xss.XssFilter ------------ xss filter init ------------
2022-03-21 11:40:10 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2022-03-21 11:40:10 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2022-03-21 11:40:10 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2022-03-21 11:40:10 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2022-03-21 11:40:10 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2022-03-21 11:40:11 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2022-03-21 11:40:11 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2022-03-21 11:40:11 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2022-03-21 11:40:11 INFO  main org.quartz.simpl.RAMJobStore RAMJobStore initialized.
2022-03-21 11:40:11 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2022-03-21 11:40:11 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2022-03-21 11:40:11 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2022-03-21 11:40:11 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@463746eb
2022-03-21 11:40:11 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2022-03-21 11:40:11 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2022-03-21 11:40:11 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Skipping initializing disabled plugin bean swagger v2.0
2022-03-21 11:40:11 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
2022-03-21 11:40:11 INFO  main org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
2022-03-21 11:40:11 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8008"]
2022-03-21 11:40:11 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8008 (http) with context path ''
2022-03-21 11:40:11 INFO  main com.hero.sms.AgentApplication Started AgentApplication in 17.856 seconds (JVM running for 21.543)
2022-03-21 11:40:11 INFO  main com.hero.sms.common.DatabaseCache 开始缓存字典
2022-03-21 11:40:11 INFO  main p6spy 2022-03-21 11:40:11 | 耗时 4 ms | SQL 语句：
SELECT ID, CODE, CREATE_TIME, ORDER_LEVEL, PARENT_CODE, IS_DELETE, NAME, DESCRIPTION, REMARK, SORT_CODE FROM code WHERE (IS_DELETE = '0');
2022-03-21 11:40:11 INFO  main com.hero.sms.common.DatabaseCache 缓存代理信息
2022-03-21 11:40:11 INFO  main p6spy 2022-03-21 11:40:11 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent;
2022-03-21 11:40:11 INFO  main com.hero.sms.common.DatabaseCache 缓存商户信息
2022-03-21 11:40:11 INFO  main p6spy 2022-03-21 11:40:11 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization;
2022-03-21 11:40:11 INFO  main com.hero.sms.common.DatabaseCache 缓存短信通道信息
2022-03-21 11:40:11 INFO  main p6spy 2022-03-21 11:40:11 | 耗时 1 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel;
2022-03-21 11:40:11 INFO  main com.hero.sms.common.DatabaseCache 缓存支付通道信息
2022-03-21 11:40:11 INFO  main p6spy 2022-03-21 11:40:11 | 耗时 1 ms | SQL 语句：
SELECT id, key1, key2, min_amount, cost, key5, key3, key4, weight, remark, encrypt_key, impl_full_class, netway_code, create_time, merch_no, request_url, state_code, sign_key, callBack_url, channel_name, pay_code, max_amount FROM t_pay_channel;
2022-03-21 11:40:11 INFO  main com.hero.sms.common.DatabaseCache 缓存IP黑名单信息
2022-03-21 11:40:11 INFO  main p6spy 2022-03-21 11:40:11 | 耗时 1 ms | SQL 语句：
SELECT Id, Black_Ip, IsAvailability, LImit_Project, Description, Create_User, Remark, Create_Date FROM t_black_ip_config WHERE (IsAvailability = '1');
2022-03-21 11:40:11 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号段区域信息
2022-03-21 11:40:12 INFO  main p6spy 2022-03-21 11:40:12 | 耗时 684 ms | SQL 语句：
SELECT Id, MobileNumber, MobileArea, Province_Code, PostCode, AreaCode, Create_Date, MobileType FROM mobile_area;
2022-03-21 11:40:17 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号码黑名单信息
2022-03-21 11:40:17 INFO  main p6spy 2022-03-21 11:40:17 | 耗时 8 ms | SQL 语句：
SELECT area, number FROM t_mobile_black;
2022-03-21 11:40:17 INFO  main com.hero.sms.common.DatabaseCache 缓存网关类型信息
2022-03-21 11:40:17 INFO  main com.hero.sms.common.DatabaseCache Begin-缓存地区列表
2022-03-21 11:40:17 INFO  main p6spy 2022-03-21 11:40:17 | 耗时 1 ms | SQL 语句：
SELECT id, extend, create_time, area_name, area_coding, out_area, in_area, order_num FROM t_area_code ORDER BY order_num ASC;
2022-03-21 11:40:17 INFO  main com.hero.sms.common.DatabaseCache End-地区列表缓存完成
2022-03-21 11:40:17 INFO  main com.hero.sms.common.DatabaseCache 字典缓存完成
2022-03-21 11:40:18 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2022-03-21 11:40:18 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2022-03-21 11:40:22 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2022-03-21 11:40:22 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2022-03-21 11:40:22 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2022-03-21 11:40:22 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner                                                       
2022-03-21 11:40:22 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner 短信平台启动完毕，地址：http://192.168.189.1:8008/login
2022-03-21 11:40:39 INFO  http-nio-8008-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2022-03-21 11:40:39 INFO  http-nio-8008-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2022-03-21 11:40:39 INFO  http-nio-8008-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 30 ms
2022-03-21 11:40:39 INFO  http-nio-8008-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2022-03-21 11:40:40 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:40:40 | 耗时 9 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:40:40 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:40:40 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_organization WHERE (Agent_Id = 35);
2022-03-21 11:40:40 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:40:40 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization WHERE (Agent_Id = 35) ORDER BY Id DESC LIMIT 0,10;
2022-03-21 11:40:40 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:40:40 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.organization.OrganizationController.organizationList()', '2022-03-21T11:40:40.685+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 157, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" organization: "Organization(id=null, agentId=35, businessUserId=null, organizationName=null, organizationCode=null, contact=null, contactMobile=null, email=null, address=null, webUrl=null, amount=null, availableAmount=null, cashAmount=null, sendSmsTotal=null, status=null, approveStateCode=null, smsSign=null, chargesType=null, settlementType=null, smsApproveType=null, interfaceType=null, md5Key=null, bindIp=null, notifyUrl=null, dataMd5=null, description=null, remark=null, createUser=null, createDate=null)"', '商户列表', 'vagent');
2022-03-21 11:40:42 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:40:42 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization WHERE (Id = '117' AND Agent_Id = 35);
2022-03-21 11:40:42 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:40:42 | 耗时 1 ms | SQL 语句：
SELECT Id, Cost_Name, Cost_Value, Organization_Code, Description, Remark, sms_type, State, Operator, Channel_Id, Create_Date FROM t_organization_cost WHERE (Organization_Code = 'SMS210306175250BLLX');
2022-03-21 11:40:42 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:40:42 | 耗时 0 ms | SQL 语句：
SELECT Id, Cost_Name, Cost_Value, Organization_Code, Description, Remark, sms_type, State, Operator, Channel_Id, Create_Date FROM t_organization_cost WHERE (Organization_Code = 'SMS210306175250BLLX');
2022-03-21 11:40:49 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:40:49 | 耗时 2 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization WHERE (Id = '97' AND Agent_Id = 35);
2022-03-21 11:40:49 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:40:49 | 耗时 0 ms | SQL 语句：
SELECT Id, Cost_Name, Cost_Value, Organization_Code, Description, Remark, sms_type, State, Operator, Channel_Id, Create_Date FROM t_organization_cost WHERE (Organization_Code = '20200826164014MWDR');
2022-03-21 11:40:49 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:40:49 | 耗时 2 ms | SQL 语句：
SELECT Id, Cost_Name, Cost_Value, Organization_Code, Description, Remark, sms_type, State, Operator, Channel_Id, Create_Date FROM t_organization_cost WHERE (Organization_Code = '20200826164014MWDR');
2022-03-21 11:42:53 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:42:53 | 耗时 1 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization WHERE (Id = '97' AND Agent_Id = 35);
2022-03-21 11:42:53 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:42:53 | 耗时 0 ms | SQL 语句：
SELECT Id, Cost_Name, Cost_Value, Organization_Code, Description, Remark, sms_type, State, Operator, Channel_Id, Create_Date FROM t_organization_cost WHERE (Organization_Code = '20200826164014MWDR');
2022-03-21 11:42:53 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:42:53 | 耗时 2 ms | SQL 语句：
SELECT Id, Cost_Name, Cost_Value, Organization_Code, Description, Remark, sms_type, State, Operator, Channel_Id, Create_Date FROM t_organization_cost WHERE (Organization_Code = '20200826164014MWDR');
2022-03-21 11:43:02 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:43:02 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization WHERE (Id = '101' AND Agent_Id = 35);
2022-03-21 11:43:02 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:43:02 | 耗时 0 ms | SQL 语句：
SELECT Id, Cost_Name, Cost_Value, Organization_Code, Description, Remark, sms_type, State, Operator, Channel_Id, Create_Date FROM t_organization_cost WHERE (Organization_Code = 'SMS200831203105CVLC');
2022-03-21 11:43:02 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:43:02 | 耗时 1 ms | SQL 语句：
SELECT Id, Cost_Name, Cost_Value, Organization_Code, Description, Remark, sms_type, State, Operator, Channel_Id, Create_Date FROM t_organization_cost WHERE (Organization_Code = 'SMS200831203105CVLC');
2022-03-21 11:44:39 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin Application shutdown requested.
2022-03-21 11:44:39 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2022-03-21 11:44:39 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2022-03-21 11:44:39 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2022-03-21 11:44:39 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2022-03-21 11:44:39 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2022-03-21 11:44:39 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2022-03-21 11:44:39 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2022-03-21 11:44:39 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2022-03-21 11:44:39 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2022-03-21 11:44:39 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2022-03-21 11:44:39 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2022-03-21 11:44:39 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2022-03-21 11:45:03 INFO  main com.hero.sms.AgentApplication Starting AgentApplication on LAPTOP-L07PL5KH with PID 175596 (C:\work\workspaceSmsBf\sms\sms-agent\target\classes started by payBoo in C:\work\workspaceSmsBf\sms\sms-agent)
2022-03-21 11:45:03 INFO  main com.hero.sms.AgentApplication The following profiles are active: test
2022-03-21 11:45:06 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2022-03-21 11:45:06 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2022-03-21 11:45:07 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 741ms. Found 0 repository interfaces.
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$5dad1827] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [com.hero.sms.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$186ee072] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.hero.sms.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$d738c35f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.hero.sms.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$e9c237e3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$31e713f0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:08 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2022-03-21 11:45:08 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2022-03-21 11:45:08 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2022-03-21 11:45:08 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2022-03-21 11:45:08 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2022-03-21 11:45:08 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2022-03-21 11:45:08 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2022-03-21 11:45:08 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuMapper' of type [com.sun.proxy.$Proxy116] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuLimitMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuLimitMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuLimitServiceImpl' of type [com.hero.sms.service.impl.agent.AgentMenuLimitServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentMenuServiceImpl' of type [com.hero.sms.service.impl.agent.AgentMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'codeMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'codeMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'codeServiceImpl' of type [com.hero.sms.service.impl.common.CodeServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationMapper' of type [com.sun.proxy.$Proxy123] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserMapper' of type [com.sun.proxy.$Proxy124] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserLimitMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserLimitMapper' of type [com.sun.proxy.$Proxy127] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserLimitServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationUserLimitServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserMenuMapper' of type [com.sun.proxy.$Proxy129] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationUserMenuServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationUserMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentRechargeOrderMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentRechargeOrderMapper' of type [com.sun.proxy.$Proxy131] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentRechargeOrderServiceImpl' of type [com.hero.sms.service.impl.rechargeOrder.AgentRechargeOrderServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordMapper' of type [com.sun.proxy.$Proxy134] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'smsChannelMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'smsChannelMapper' of type [com.sun.proxy.$Proxy135] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sensitiveWordMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sensitiveWordMapper' of type [com.sun.proxy.$Proxy136] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sensitiveWordServiceImpl' of type [com.hero.sms.service.impl.message.SensitiveWordServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'smsGateService' of type [com.hero.sms.service.mq.SmsGateService] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'businessManageImpl' of type [com.hero.sms.service.impl.common.BusinessManageImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:12 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'commenReidsConfigure' of type [com.hero.sms.common.configure.CommenReidsConfigure$$EnhancerBySpringCGLIB$$ab5c3c00] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'commenRedisTemplate' of type [org.springframework.data.redis.core.RedisTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'commenCacheRedisService' of type [com.hero.sms.service.impl.common.CommenCacheRedisService] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'smsChannelServiceImpl' of type [com.hero.sms.service.impl.channel.SmsChannelServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'exportRecordMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'exportRecordMapper' of type [com.sun.proxy.$Proxy145] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'exportRecordServiceImpl' of type [com.hero.sms.service.impl.common.ExportRecordServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordCheckinfoMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordCheckinfoMapper' of type [com.sun.proxy.$Proxy147] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordCheckinfoServiceImpl' of type [com.hero.sms.service.impl.message.SendRecordCheckinfoServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sendRecordServiceImpl' of type [com.hero.sms.service.impl.message.SendRecordServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'returnRecordMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'returnRecordMapper' of type [com.sun.proxy.$Proxy151] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'returnRecordServiceImpl' of type [com.hero.sms.service.impl.message.ReturnRecordServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'MQService' of type [com.hero.sms.service.mq.MQService] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentSystemConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentSystemConfigMapper' of type [com.sun.proxy.$Proxy154] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentSystemConfigServiceImpl' of type [com.hero.sms.service.impl.agent.AgentSystemConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationPropertyMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationPropertyMapper' of type [com.sun.proxy.$Proxy156] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationPropertyServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationPropertyServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationGroupMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationGroupMapper' of type [com.sun.proxy.$Proxy158] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationGroupServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationGroupServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'organizationServiceImpl' of type [com.hero.sms.service.impl.organization.OrganizationServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'payChannelMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'payChannelMapper' of type [com.sun.proxy.$Proxy160] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'payChannelServiceImpl' of type [com.hero.sms.service.impl.channel.PayChannelServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'blackIpConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'blackIpConfigMapper' of type [com.sun.proxy.$Proxy162] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'blackIpConfigServiceImpl' of type [com.hero.sms.service.impl.common.BlackIpConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileBlackMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileBlackMapper' of type [com.sun.proxy.$Proxy164] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileBlackServiceImpl' of type [com.hero.sms.service.impl.message.MobileBlackServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileAreaMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileAreaMapper' of type [com.sun.proxy.$Proxy166] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mobileAreaServiceImpl' of type [com.hero.sms.service.impl.message.MobileAreaServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'areaCodeMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'areaCodeMapper' of type [com.sun.proxy.$Proxy168] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'areaCodeServiceImpl' of type [com.hero.sms.service.impl.channel.AreaCodeServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'databaseCache' of type [com.hero.sms.common.DatabaseCache] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'reportMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'reportMapper' of type [com.sun.proxy.$Proxy170] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'reportServiceImpl' of type [com.hero.sms.service.impl.message.ReportServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'agentServiceImpl' of type [com.hero.sms.service.impl.agent.AgentServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:13 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.hero.sms.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:15 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-03-21 11:45:16 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8008 (http)
2022-03-21 11:45:16 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8008"]
2022-03-21 11:45:16 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2022-03-21 11:45:16 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.27]
2022-03-21 11:45:17 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2022-03-21 11:45:17 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 13655 ms
2022-03-21 11:45:17 INFO  main com.hero.sms.common.xss.XssFilter ------------ xss filter init ------------
2022-03-21 11:45:20 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2022-03-21 11:45:20 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2022-03-21 11:45:20 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2022-03-21 11:45:20 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2022-03-21 11:45:20 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2022-03-21 11:45:21 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2022-03-21 11:45:21 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2022-03-21 11:45:21 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2022-03-21 11:45:21 INFO  main org.quartz.simpl.RAMJobStore RAMJobStore initialized.
2022-03-21 11:45:21 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2022-03-21 11:45:21 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2022-03-21 11:45:21 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2022-03-21 11:45:21 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@2f97e3de
2022-03-21 11:45:21 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2022-03-21 11:45:21 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2022-03-21 11:45:21 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Skipping initializing disabled plugin bean swagger v2.0
2022-03-21 11:45:21 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now
2022-03-21 11:45:21 INFO  main org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED started.
2022-03-21 11:45:21 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8008"]
2022-03-21 11:45:21 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8008 (http) with context path ''
2022-03-21 11:45:21 INFO  main com.hero.sms.AgentApplication Started AgentApplication in 19.491 seconds (JVM running for 25.231)
2022-03-21 11:45:21 INFO  main com.hero.sms.common.DatabaseCache 开始缓存字典
2022-03-21 11:45:22 INFO  main p6spy 2022-03-21 11:45:22 | 耗时 1 ms | SQL 语句：
SELECT ID, CODE, CREATE_TIME, ORDER_LEVEL, PARENT_CODE, IS_DELETE, NAME, DESCRIPTION, REMARK, SORT_CODE FROM code WHERE (IS_DELETE = '0');
2022-03-21 11:45:22 INFO  main com.hero.sms.common.DatabaseCache 缓存代理信息
2022-03-21 11:45:22 INFO  main p6spy 2022-03-21 11:45:22 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent;
2022-03-21 11:45:22 INFO  main com.hero.sms.common.DatabaseCache 缓存商户信息
2022-03-21 11:45:22 INFO  main p6spy 2022-03-21 11:45:22 | 耗时 1 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization;
2022-03-21 11:45:22 INFO  main com.hero.sms.common.DatabaseCache 缓存短信通道信息
2022-03-21 11:45:22 INFO  main p6spy 2022-03-21 11:45:22 | 耗时 1 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel;
2022-03-21 11:45:22 INFO  main com.hero.sms.common.DatabaseCache 缓存支付通道信息
2022-03-21 11:45:22 INFO  main p6spy 2022-03-21 11:45:22 | 耗时 1 ms | SQL 语句：
SELECT id, key1, key2, min_amount, cost, key5, key3, key4, weight, remark, encrypt_key, impl_full_class, netway_code, create_time, merch_no, request_url, state_code, sign_key, callBack_url, channel_name, pay_code, max_amount FROM t_pay_channel;
2022-03-21 11:45:22 INFO  main com.hero.sms.common.DatabaseCache 缓存IP黑名单信息
2022-03-21 11:45:22 INFO  main p6spy 2022-03-21 11:45:22 | 耗时 1 ms | SQL 语句：
SELECT Id, Black_Ip, IsAvailability, LImit_Project, Description, Create_User, Remark, Create_Date FROM t_black_ip_config WHERE (IsAvailability = '1');
2022-03-21 11:45:22 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号段区域信息
2022-03-21 11:45:22 INFO  main p6spy 2022-03-21 11:45:22 | 耗时 604 ms | SQL 语句：
SELECT Id, MobileNumber, MobileArea, Province_Code, PostCode, AreaCode, Create_Date, MobileType FROM mobile_area;
2022-03-21 11:45:28 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号码黑名单信息
2022-03-21 11:45:28 INFO  main p6spy 2022-03-21 11:45:28 | 耗时 5 ms | SQL 语句：
SELECT area, number FROM t_mobile_black;
2022-03-21 11:45:28 INFO  main com.hero.sms.common.DatabaseCache 缓存网关类型信息
2022-03-21 11:45:28 INFO  main com.hero.sms.common.DatabaseCache Begin-缓存地区列表
2022-03-21 11:45:28 INFO  main p6spy 2022-03-21 11:45:28 | 耗时 1 ms | SQL 语句：
SELECT id, extend, create_time, area_name, area_coding, out_area, in_area, order_num FROM t_area_code ORDER BY order_num ASC;
2022-03-21 11:45:28 INFO  main com.hero.sms.common.DatabaseCache End-地区列表缓存完成
2022-03-21 11:45:28 INFO  main com.hero.sms.common.DatabaseCache 字典缓存完成
2022-03-21 11:45:28 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2022-03-21 11:45:28 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2022-03-21 11:45:33 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2022-03-21 11:45:33 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2022-03-21 11:45:33 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2022-03-21 11:45:33 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner                                                       
2022-03-21 11:45:33 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner 短信平台启动完毕，地址：http://192.168.189.1:8008/login
2022-03-21 11:48:40 INFO  http-nio-8008-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2022-03-21 11:48:40 INFO  http-nio-8008-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2022-03-21 11:48:40 INFO  http-nio-8008-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 20 ms
2022-03-21 11:48:41 INFO  http-nio-8008-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2022-03-21 11:48:41 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:48:41 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization WHERE (Id = '117' AND Agent_Id = 35);
2022-03-21 11:48:41 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:48:41 | 耗时 1 ms | SQL 语句：
SELECT Id, Cost_Name, Cost_Value, Organization_Code, Description, Remark, sms_type, State, Operator, Channel_Id, Create_Date FROM t_organization_cost WHERE (Organization_Code = 'SMS210306175250BLLX');
2022-03-21 11:48:41 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:48:41 | 耗时 7 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 35);
2022-03-21 11:49:00 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:49:00 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization WHERE (Id = '117' AND Agent_Id = 35);
2022-03-21 11:49:00 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:49:00 | 耗时 0 ms | SQL 语句：
SELECT Id, Cost_Name, Cost_Value, Organization_Code, Description, Remark, sms_type, State, Operator, Channel_Id, Create_Date FROM t_organization_cost WHERE (Organization_Code = 'SMS210306175250BLLX');
2022-03-21 11:49:00 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:49:00 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 35);
2022-03-21 11:49:08 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:49:08 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:49:08 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:49:08 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 35);
2022-03-21 11:49:08 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:49:08 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization WHERE (Organization_Code = 'SMS210306175250BLLX');
2022-03-21 11:49:08 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:49:08 | 耗时 0 ms | SQL 语句：
DELETE FROM t_organization_cost WHERE (Organization_Code = 'SMS210306175250BLLX');
2022-03-21 11:49:08 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:49:08 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization WHERE (Organization_Code = 'SMS210306175250BLLX');
2022-03-21 11:49:08 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:49:08 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 35);
2022-03-21 11:49:08 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:49:08 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.organization.OrganizationCostController.updateOrganizationCosts()', '2022-03-21T11:49:08.647+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 93, ' organizationCosts: "[OrganizationCost(id=null, organizationCode=SMS210306175250BLLX, smsType=1, costName=+86, costValue=50, state=1, channelId=null, operator=, description=, remark=vagent添加, createDate=Mon Mar 21 11:49:08 CST 2022), OrganizationCost(id=null, organizationCode=SMS210306175250BLLX, smsType=1, costName=+852, costValue=40, state=1, channelId=, operator=null, description=null, remark=null, createDate=null)]"', '商户用户资费更新', 'vagent');
2022-03-21 11:49:21 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:49:21 | 耗时 5 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:49:22 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:49:22 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_agent WHERE (Up_Agent_Id = 35);
2022-03-21 11:49:22 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:49:22 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Up_Agent_Id = 35) ORDER BY Id DESC LIMIT 0,10;
2022-03-21 11:49:22 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:49:22 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.agent.AgentController.agentList()', '2022-03-21T11:49:22.273+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 66, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" agent: "Agent(id=null, upAgentId=35, agentName=null, agentAccount=null, agentPassword=null, payPassword=null, lastLoginIp=null, lastLoginTime=null, loginFaildCount=null, amount=null, quotaAmount=null, availableAmount=null, cashAmount=null, sendSmsTotal=null, dayLimit=null, stateCode=null, phoneNumber=null, email=null, qq=null, levelCode=null, dataMd5=null, googleKey=null, description=null, remark=null, createUser=null, createDate=null, needBindGoogleKey=null, loginIp=null)"', '代理列表', 'vagent');
2022-03-21 11:49:23 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:49:23 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Up_Agent_Id = 35 AND Id = 36);
2022-03-21 11:49:24 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:49:24 | 耗时 1 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 36);
2022-03-21 11:49:24 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:49:24 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 35);
2022-03-21 11:50:10 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:50:10 | 耗时 2 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Up_Agent_Id = 35 AND Id = 36);
2022-03-21 11:50:10 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:50:10 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 36);
2022-03-21 11:50:10 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:50:10 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 35);
2022-03-21 11:50:20 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:50:20 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Up_Agent_Id = 35 AND Id = 43);
2022-03-21 11:50:20 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:50:20 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 43);
2022-03-21 11:50:20 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:50:20 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 35);
2022-03-21 11:50:36 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:50:36 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:50:36 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:50:36 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE Id = 43;
2022-03-21 11:50:36 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:50:36 | 耗时 1 ms | SQL 语句：
DELETE FROM t_agent_cost WHERE (Agent_Id = 43);
2022-03-21 11:50:36 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:50:36 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 35);
2022-03-21 11:50:36 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:50:36 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.agent.AgentCostController.updateAgentCosts()', '2022-03-21T11:50:36.641+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 54, ' agentCosts: "[AgentCost(id=249, agentId=43, smsType=1, name=+86, value=60, channelId=null, operator=, description=, remark=vagent添加, createDate=Mon Mar 21 11:50:36 CST 2022), AgentCost(id=250, agentId=43, smsType=1, name=+853, value=70, channelId=null, operator=null, description=, remark=vagent添加, createDate=Mon Mar 21 11:50:36 CST 2022), AgentCost(id=251, agentId=43, smsType=1, name=+1US, value=50, channelId=null, operator=null, description=, remark=vagent添加, createDate=Mon Mar 21 11:50:36 CST 2022)]"', '更新代理资费', 'vagent');
2022-03-21 11:50:38 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:50:38 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Up_Agent_Id = 35 AND Id = 36);
2022-03-21 11:50:38 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:50:38 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 36);
2022-03-21 11:50:38 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:50:38 | 耗时 1 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 35);
2022-03-21 11:50:41 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:50:41 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Up_Agent_Id = 35 AND Id = 43);
2022-03-21 11:50:41 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:50:41 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 43);
2022-03-21 11:50:41 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:50:41 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 35);
2022-03-21 11:50:49 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:50:49 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Up_Agent_Id = 35 AND Id = 45);
2022-03-21 11:50:49 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:50:49 | 耗时 1 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 45);
2022-03-21 11:50:49 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:50:49 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 35);
2022-03-21 11:50:55 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:50:55 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:50:55 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:50:55 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE Id = 45;
2022-03-21 11:50:55 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:50:55 | 耗时 0 ms | SQL 语句：
DELETE FROM t_agent_cost WHERE (Agent_Id = 45);
2022-03-21 11:50:55 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:50:55 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 35);
2022-03-21 11:50:55 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:50:55 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.agent.AgentCostController.updateAgentCosts()', '2022-03-21T11:50:55.074+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 19, ' agentCosts: "[AgentCost(id=252, agentId=45, smsType=1, name=+86, value=60, channelId=null, operator=, description=, remark=vagent添加, createDate=Mon Mar 21 11:50:55 CST 2022), AgentCost(id=253, agentId=45, smsType=1, name=+853, value=60, channelId=null, operator=null, description=, remark=vagent添加, createDate=Mon Mar 21 11:50:55 CST 2022)]"', '更新代理资费', 'vagent');
2022-03-21 11:50:56 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:50:56 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Up_Agent_Id = 35 AND Id = 45);
2022-03-21 11:50:56 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:50:56 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 45);
2022-03-21 11:50:56 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:50:56 | 耗时 1 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 35);
2022-03-21 11:51:30 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:51:30 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:51:30 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:51:30 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:51:30 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:51:30 | 耗时 9 ms | SQL 语句：
SELECT COUNT(1) FROM t_organization_user u LEFT JOIN t_organization o ON (o.Organization_Code = u.Organization_Code) WHERE (o.Agent_Id = 35);
2022-03-21 11:51:30 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:51:30 | 耗时 0 ms | SQL 语句：
SELECT u.* FROM t_organization_user u LEFT JOIN t_organization o ON (o.Organization_Code = u.Organization_Code) WHERE (o.Agent_Id = 35) ORDER BY u.id DESC LIMIT 0,10;
2022-03-21 11:51:30 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:51:30 | 耗时 5 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.organization.OrganizationUserController.organizationUserList()', '2022-03-21T11:51:30.328+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 35, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" organizationUser: "OrganizationUser(id=null, organizationCode=null, userName=null, userAccount=null, userPassword=null, lastLoginIp=null, lastLoginTime=null, loginFaildCount=null, status=null, accountType=null, googleKey=null, needBindGoogleKey=null, loginIp=null, description=null, remark=null, createUser=null, createDate=null)"', '商户用户列表', 'vagent');
2022-03-21 11:51:33 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:51:33 | 耗时 1 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization WHERE (Id = '117' AND Agent_Id = 35);
2022-03-21 11:51:39 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:51:39 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:51:39 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:51:39 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:51:39 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:51:39 | 耗时 7 ms | SQL 语句：
SELECT COUNT(1) FROM t_agent_recharge_order o LEFT JOIN t_agent a ON (o.`agent_id` = a.`Id`) WHERE (o.`agent_id` = '35' AND o.`req_time` >= '2022-03-21 00:00:00' AND o.`req_time` <= '2022-03-21 23:59:59' OR a.`Up_Agent_Id` = 35 AND o.`req_time` >= '2022-03-21 00:00:00' AND o.`req_time` <= '2022-03-21 23:59:59');
2022-03-21 11:51:39 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:51:39 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.agent.AgentRechargeOrderController.agentRechargeOrderList()', '2022-03-21T11:51:39.362+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 38, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" agentRechargeOrder: AgentRechargeOrder(id=null, agentId=35, orderNo=null, payChannelId=null, payMerchNo=null, rechargeType=null, netwayCode=null, rechargePictureUrl=null, rechargeAmount=null, availableAmount=null, reqStateCode=null, reqTime=null, reqStateDescription=null, rechargeStateCode=null, rechargeTime=null, rechargeCompleteTime=null, remark=null, ceateUser=null, createTime=null, recordedType=null) agentReqStartTime: null agentReqEndTime: null', '代理充值订单列表', 'vagent');
2022-03-21 11:51:40 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:51:40 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:51:40 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:51:40 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:51:40 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:51:40 | 耗时 15 ms | SQL 语句：
SELECT COUNT(1) FROM t_organization_recharge_order o LEFT JOIN t_organization g ON (o.`organization_code` = g.`Organization_Code`) WHERE (g.`Agent_Id` = 35 AND o.`req_time` >= '2022-03-21 00:00:00' AND o.`req_time` <= '2022-03-21 23:59:59');
2022-03-21 11:51:40 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:51:40 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.organization.OrganizationRechargeOrderController.organizationRechargeOrderList()', '2022-03-21T11:51:40.664+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 42, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" organizationRechargeOrder: OrganizationRechargeOrder(id=null, organizationCode=null, orderNo=null, payChannelId=null, payMerchNo=null, rechargeType=null, netwayCode=null, rechargePictureUrl=null, rechargeAmount=null, availableAmount=null, reqStateCode=null, reqTime=null, reqStateDescription=null, rechargeStateCode=null, rechargeTime=null, rechargeCompleteTime=null, remark=null, ceateUser=null, createTime=null, recordedType=null) orgReqStartTime: null orgReqEndTime: null', '商户充值订单列表', 'vagent');
2022-03-21 11:51:55 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:51:55 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:51:55 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:51:55 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:51:56 INFO  http-nio-8008-exec-10 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxList192.168.189.1]，描述为 [发件箱列表查询] 的接口
2022-03-21 11:51:56 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:51:56 | 耗时 7 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (agent_id = 35 AND create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800');
2022-03-21 11:51:56 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:51:56 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxList()', '2022-03-21T11:51:56.052+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 94, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '发件箱列表查询', 'vagent');
2022-03-21 11:52:07 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:52:07 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:52:07 INFO  http-nio-8008-exec-8 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxList192.168.189.1]，描述为 [发件箱列表查询] 的接口
2022-03-21 11:52:07 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:52:07 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (agent_id = 35 AND create_time >= '2014-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800');
2022-03-21 11:52:07 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:52:07 | 耗时 3 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, timing_time, agent_income_amount, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, number_count, income_amount, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box WHERE (agent_id = 35 AND create_time >= '2014-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 11:52:07 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:52:07 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxList()', '2022-03-21T11:52:07.335+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 22, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Fri Mar 21 00:00:00 CST 2014, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '发件箱列表查询', 'vagent');
2022-03-21 11:52:13 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:52:13 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:52:13 INFO  http-nio-8008-exec-9 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxStatistic192.168.189.1]，描述为 [发件箱统计数据] 的接口
2022-03-21 11:52:13 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:52:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(DISTINCT org_code) AS orgTotal, COUNT(1) AS total, COALESCE(SUM(number_count), 0) AS numberCount, COALESCE(SUM(sms_count), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_box WHERE (agent_id = 35 AND create_time >= '2014-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800');
2022-03-21 11:52:13 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:52:13 | 耗时 10 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.statistic()', '2022-03-21T11:52:13.847+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 42, ' sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Fri Mar 21 00:00:00 CST 2014, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '发件箱统计数据', 'vagent');
2022-03-21 11:52:17 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:52:17 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:52:17 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:52:17 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:52:17 INFO  http-nio-8008-exec-2 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistoryList192.168.189.1]，描述为 [代理历史发件箱列表查询] 的接口
2022-03-21 11:52:17 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:52:17 | 耗时 8 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (agent_id = 35 AND create_time >= '2022-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800');
2022-03-21 11:52:17 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:52:17 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistoryList()', '2022-03-21T11:52:17.784+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 35, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Thu Mar 10 00:00:00 CST 2022, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '代理历史发件箱列表查询', 'vagent');
2022-03-21 11:52:22 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:52:22 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:52:22 INFO  http-nio-8008-exec-4 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistoryList192.168.189.1]，描述为 [代理历史发件箱列表查询] 的接口
2022-03-21 11:52:22 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:52:22 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (agent_id = 35 AND create_time >= '2017-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800');
2022-03-21 11:52:22 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:52:22 | 耗时 1 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, agent_income_amount, timing_time, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, income_amount, number_count, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box_history WHERE (agent_id = 35 AND create_time >= '2017-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 11:52:22 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:52:22 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistoryList()', '2022-03-21T11:52:22.697+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 24, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Fri Mar 10 00:00:00 CST 2017, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '代理历史发件箱列表查询', 'vagent');
2022-03-21 11:52:36 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:52:36 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:52:36 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:52:36 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:52:36 INFO  http-nio-8008-exec-7 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 11:52:36 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:52:36 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND agent_id = 35);
2022-03-21 11:52:36 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:52:36 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.sendRecordList()', '2022-03-21T11:52:36.888+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 36, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendRecord: "SendRecordQuery(createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'vagent');
2022-03-21 11:52:56 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:52:56 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:52:56 INFO  http-nio-8008-exec-10 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 11:52:56 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:52:56 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2015-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND agent_id = 35);
2022-03-21 11:52:56 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:52:56 | 耗时 1 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, res_msgid, channel_cost_amount, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, sub_type, up_agent_income_amount FROM t_send_record WHERE (create_time >= '2015-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND agent_id = 35) ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 11:52:56 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:52:56 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.sendRecordList()', '2022-03-21T11:52:56.891+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 22, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendRecord: "SendRecordQuery(createStartTime=Sat Mar 21 00:00:00 CST 2015, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'vagent');
2022-03-21 11:53:48 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:53:48 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:53:48 INFO  http-nio-8008-exec-1 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxList192.168.189.1]，描述为 [发件箱列表查询] 的接口
2022-03-21 11:53:48 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:53:48 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (agent_id = 35 AND create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800');
2022-03-21 11:53:48 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:53:48 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:53:48 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:53:48 | 耗时 11 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxList()', '2022-03-21T11:53:48.674+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 16, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '发件箱列表查询', 'vagent');
2022-03-21 11:53:56 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:53:56 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:53:56 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:53:56 | 耗时 12 ms | SQL 语句：
SELECT m.perms FROM t_agent_menu_limit l LEFT JOIN t_agent u ON (u.Id = l.AGENT_ID) LEFT JOIN t_agent_menu m ON (l.MENU_ID = m.MENU_ID) WHERE u.Agent_Account = 'vagent' AND m.perms IS NOT NULL AND m.perms <> '';
2022-03-21 11:53:56 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:53:56 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:53:57 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:53:57 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:53:57 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:53:57 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_agent_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT l.menu_id FROM t_agent_menu_limit l LEFT JOIN t_agent a ON (a.id = l.agent_id) WHERE a.Agent_Account = 'vagent') ORDER BY m.order_num;
2022-03-21 11:53:57 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:53:57 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:53:57 INFO  http-nio-8008-exec-5 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxList192.168.189.1]，描述为 [发件箱列表查询] 的接口
2022-03-21 11:53:57 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:53:57 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (agent_id = 35 AND create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800');
2022-03-21 11:53:57 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:53:57 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:53:57 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:53:57 | 耗时 4 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxList()', '2022-03-21T11:53:57.355+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 18, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '发件箱列表查询', 'vagent');
2022-03-21 11:54:44 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:54:44 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:54:44 INFO  http-nio-8008-exec-7 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxList192.168.189.1]，描述为 [发件箱列表查询] 的接口
2022-03-21 11:54:44 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:54:44 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (agent_id = 35 AND create_time >= '2013-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800');
2022-03-21 11:54:44 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:54:44 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, timing_time, agent_income_amount, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, number_count, income_amount, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box WHERE (agent_id = 35 AND create_time >= '2013-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 11:54:44 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:54:44 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxList()', '2022-03-21T11:54:44.853+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 19, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Thu Mar 21 00:00:00 CST 2013, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '发件箱列表查询', 'vagent');
2022-03-21 11:55:30 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:55:30 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:55:30 INFO  http-nio-8008-exec-2 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxList192.168.189.1]，描述为 [发件箱列表查询] 的接口
2022-03-21 11:55:30 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:55:30 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (agent_id = 35 AND create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800');
2022-03-21 11:55:30 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:55:30 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:55:31 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:55:31 | 耗时 10 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxList()', '2022-03-21T11:55:30.989+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 16, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '发件箱列表查询', 'vagent');
2022-03-21 11:55:39 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:55:39 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:55:40 INFO  http-nio-8008-exec-4 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxList192.168.189.1]，描述为 [发件箱列表查询] 的接口
2022-03-21 11:55:40 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:55:40 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (agent_id = 35 AND create_time >= '2019-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND sms_number_area = '+853');
2022-03-21 11:55:40 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:55:40 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxList()', '2022-03-21T11:55:40.013+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 21, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Thu Mar 21 00:00:00 CST 2019, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '发件箱列表查询', 'vagent');
2022-03-21 11:55:56 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:55:56 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:55:56 INFO  http-nio-8008-exec-6 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxList192.168.189.1]，描述为 [发件箱列表查询] 的接口
2022-03-21 11:55:56 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:55:56 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (agent_id = 35 AND create_time >= '2019-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND sms_number_area = '+852');
2022-03-21 11:55:56 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:55:56 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxList()', '2022-03-21T11:55:56.220+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 18, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Thu Mar 21 00:00:00 CST 2019, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '发件箱列表查询', 'vagent');
2022-03-21 11:55:57 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:55:57 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:55:57 INFO  http-nio-8008-exec-5 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxStatistic192.168.189.1]，描述为 [发件箱统计数据] 的接口
2022-03-21 11:55:57 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:55:57 | 耗时 0 ms | SQL 语句：
SELECT COUNT(DISTINCT org_code) AS orgTotal, COUNT(1) AS total, COALESCE(SUM(number_count), 0) AS numberCount, COALESCE(SUM(sms_count), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_box WHERE (agent_id = 35 AND create_time >= '2019-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND sms_number_area = '+852');
2022-03-21 11:55:57 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:55:57 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.statistic()', '2022-03-21T11:55:57.499+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 20, ' sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Thu Mar 21 00:00:00 CST 2019, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '发件箱统计数据', 'vagent');
2022-03-21 11:56:01 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:56:01 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:56:01 INFO  http-nio-8008-exec-7 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxList192.168.189.1]，描述为 [发件箱列表查询] 的接口
2022-03-21 11:56:01 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:56:01 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (agent_id = 35 AND create_time >= '2019-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND sms_number_area = '+86');
2022-03-21 11:56:01 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:56:01 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, timing_time, agent_income_amount, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, number_count, income_amount, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box WHERE (agent_id = 35 AND create_time >= '2019-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND sms_number_area = '+86') ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 11:56:01 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:56:01 | 耗时 11 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxList()', '2022-03-21T11:56:01.747+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 18, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Thu Mar 21 00:00:00 CST 2019, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '发件箱列表查询', 'vagent');
2022-03-21 11:56:03 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:56:03 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:56:03 INFO  http-nio-8008-exec-10 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxStatistic192.168.189.1]，描述为 [发件箱统计数据] 的接口
2022-03-21 11:56:03 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:56:03 | 耗时 1 ms | SQL 语句：
SELECT COUNT(DISTINCT org_code) AS orgTotal, COUNT(1) AS total, COALESCE(SUM(number_count), 0) AS numberCount, COALESCE(SUM(sms_count), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_box WHERE (agent_id = 35 AND create_time >= '2019-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND sms_number_area = '+86');
2022-03-21 11:56:03 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:56:03 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.statistic()', '2022-03-21T11:56:03.291+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 27, ' sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Thu Mar 21 00:00:00 CST 2019, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '发件箱统计数据', 'vagent');
2022-03-21 11:56:05 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:56:05 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:56:05 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:56:05 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:56:05 INFO  http-nio-8008-exec-8 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistoryList192.168.189.1]，描述为 [代理历史发件箱列表查询] 的接口
2022-03-21 11:56:05 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:56:05 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (agent_id = 35 AND create_time >= '2022-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800');
2022-03-21 11:56:05 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:56:05 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistoryList()', '2022-03-21T11:56:05.938+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 23, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Thu Mar 10 00:00:00 CST 2022, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '代理历史发件箱列表查询', 'vagent');
2022-03-21 11:56:12 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:56:12 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:56:12 INFO  http-nio-8008-exec-3 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistoryList192.168.189.1]，描述为 [代理历史发件箱列表查询] 的接口
2022-03-21 11:56:12 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:56:12 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (agent_id = 35 AND create_time >= '2017-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800');
2022-03-21 11:56:12 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:56:12 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, agent_income_amount, timing_time, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, income_amount, number_count, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box_history WHERE (agent_id = 35 AND create_time >= '2017-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 11:56:12 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:56:12 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistoryList()', '2022-03-21T11:56:12.477+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 22, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Fri Mar 10 00:00:00 CST 2017, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '代理历史发件箱列表查询', 'vagent');
2022-03-21 11:56:42 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:56:42 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:56:42 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:56:42 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:56:42 INFO  http-nio-8008-exec-4 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistoryList192.168.189.1]，描述为 [代理历史发件箱列表查询] 的接口
2022-03-21 11:56:42 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:56:42 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (agent_id = 35 AND create_time >= '2022-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800');
2022-03-21 11:56:42 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:56:42 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistoryList()', '2022-03-21T11:56:42.523+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 21, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Thu Mar 10 00:00:00 CST 2022, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '代理历史发件箱列表查询', 'vagent');
2022-03-21 11:56:59 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:56:59 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:56:59 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:56:59 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:56:59 INFO  http-nio-8008-exec-7 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistoryList192.168.189.1]，描述为 [代理历史发件箱列表查询] 的接口
2022-03-21 11:56:59 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:56:59 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (agent_id = 35 AND create_time >= '2022-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800');
2022-03-21 11:56:59 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:56:59 | 耗时 5 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistoryList()', '2022-03-21T11:56:59.055+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 17, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Thu Mar 10 00:00:00 CST 2022, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '代理历史发件箱列表查询', 'vagent');
2022-03-21 11:57:03 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:57:03 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:57:03 INFO  http-nio-8008-exec-9 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistoryList192.168.189.1]，描述为 [代理历史发件箱列表查询] 的接口
2022-03-21 11:57:03 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:57:03 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (agent_id = 35 AND create_time >= '2018-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800');
2022-03-21 11:57:03 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:57:03 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, agent_income_amount, timing_time, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, income_amount, number_count, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box_history WHERE (agent_id = 35 AND create_time >= '2018-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 11:57:03 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:57:03 | 耗时 6 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistoryList()', '2022-03-21T11:57:03.195+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 18, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Sat Mar 10 00:00:00 CST 2018, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '代理历史发件箱列表查询', 'vagent');
2022-03-21 11:57:06 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:57:06 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:57:06 INFO  http-nio-8008-exec-1 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistoryList192.168.189.1]，描述为 [代理历史发件箱列表查询] 的接口
2022-03-21 11:57:06 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:57:06 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (agent_id = 35 AND create_time >= '2018-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800' AND sms_number_area = '+852');
2022-03-21 11:57:06 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:57:06 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistoryList()', '2022-03-21T11:57:06.291+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 19, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Sat Mar 10 00:00:00 CST 2018, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '代理历史发件箱列表查询', 'vagent');
2022-03-21 11:57:08 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:57:08 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:57:08 INFO  http-nio-8008-exec-8 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistoryList192.168.189.1]，描述为 [代理历史发件箱列表查询] 的接口
2022-03-21 11:57:08 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:57:08 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (agent_id = 35 AND create_time >= '2018-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800' AND sms_number_area = '+86');
2022-03-21 11:57:08 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:57:08 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, agent_income_amount, timing_time, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, income_amount, number_count, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box_history WHERE (agent_id = 35 AND create_time >= '2018-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800' AND sms_number_area = '+86') ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 11:57:08 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:57:08 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistoryList()', '2022-03-21T11:57:08.390+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 18, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Sat Mar 10 00:00:00 CST 2018, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '代理历史发件箱列表查询', 'vagent');
2022-03-21 11:57:25 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:57:25 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:57:25 INFO  http-nio-8008-exec-2 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxSubordinateList192.168.189.1]，描述为 [子代理发件箱列表查询] 的接口
2022-03-21 11:57:25 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:57:25 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (up_agent_id = 35 AND create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800');
2022-03-21 11:57:25 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:57:25 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxSubordinateList()', '2022-03-21T11:57:25.058+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 25, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '子代理发件箱列表查询', 'vagent');
2022-03-21 11:57:32 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:57:32 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:57:32 INFO  http-nio-8008-exec-6 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxSubordinateList192.168.189.1]，描述为 [子代理发件箱列表查询] 的接口
2022-03-21 11:57:32 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:57:32 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (up_agent_id = 35 AND create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800');
2022-03-21 11:57:32 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:57:32 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, timing_time, agent_income_amount, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, number_count, income_amount, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box WHERE (up_agent_id = 35 AND create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 11:57:32 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 11:57:32 | 耗时 10 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxSubordinateList()', '2022-03-21T11:57:32.152+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 21, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Wed Mar 21 00:00:00 CST 2018, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '子代理发件箱列表查询', 'vagent');
2022-03-21 11:58:01 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:58:01 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:58:01 INFO  http-nio-8008-exec-10 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxSubordinateList192.168.189.1]，描述为 [子代理发件箱列表查询] 的接口
2022-03-21 11:58:01 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:58:01 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (up_agent_id = 35 AND create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800');
2022-03-21 11:58:01 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 11:58:01 | 耗时 10 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxSubordinateList()', '2022-03-21T11:58:01.272+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 16, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '子代理发件箱列表查询', 'vagent');
2022-03-21 11:58:09 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:58:09 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:58:09 INFO  http-nio-8008-exec-7 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxSubordinateList192.168.189.1]，描述为 [子代理发件箱列表查询] 的接口
2022-03-21 11:58:09 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:58:09 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (up_agent_id = 35 AND create_time >= '2016-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800');
2022-03-21 11:58:09 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:58:09 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, timing_time, agent_income_amount, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, number_count, income_amount, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box WHERE (up_agent_id = 35 AND create_time >= '2016-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 11:58:09 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:58:09 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxSubordinateList()', '2022-03-21T11:58:09.933+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 22, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Mon Mar 21 00:00:00 CST 2016, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '子代理发件箱列表查询', 'vagent');
2022-03-21 11:58:11 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:58:11 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:58:11 INFO  http-nio-8008-exec-9 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxsubordinateStatistic192.168.189.1]，描述为 [子代理发件箱统计数据] 的接口
2022-03-21 11:58:11 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:58:11 | 耗时 1 ms | SQL 语句：
SELECT COUNT(DISTINCT org_code) AS orgTotal, COUNT(1) AS total, COALESCE(SUM(number_count), 0) AS numberCount, COALESCE(SUM(sms_count), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_box WHERE (up_agent_id = 35 AND create_time >= '2016-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800');
2022-03-21 11:58:11 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:58:11 | 耗时 11 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.subordinateStatistic()', '2022-03-21T11:58:11.865+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 19, ' sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Mon Mar 21 00:00:00 CST 2016, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '子代理发件箱统计数据', 'vagent');
2022-03-21 11:58:17 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:58:17 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:58:17 INFO  http-nio-8008-exec-1 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxsubordinateStatistic192.168.189.1]，描述为 [子代理发件箱统计数据] 的接口
2022-03-21 11:58:17 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:58:17 | 耗时 0 ms | SQL 语句：
SELECT COUNT(DISTINCT org_code) AS orgTotal, COUNT(1) AS total, COALESCE(SUM(number_count), 0) AS numberCount, COALESCE(SUM(sms_count), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_box WHERE (up_agent_id = 35 AND create_time >= '2016-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND sms_number_area = '+852');
2022-03-21 11:58:17 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:58:17 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.subordinateStatistic()', '2022-03-21T11:58:17.974+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 19, ' sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Mon Mar 21 00:00:00 CST 2016, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '子代理发件箱统计数据', 'vagent');
2022-03-21 11:58:19 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:58:19 | 耗时 5 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:58:19 INFO  http-nio-8008-exec-8 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxSubordinateList192.168.189.1]，描述为 [子代理发件箱列表查询] 的接口
2022-03-21 11:58:19 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:58:19 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (up_agent_id = 35 AND create_time >= '2016-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND sms_number_area = '+852');
2022-03-21 11:58:19 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:58:19 | 耗时 13 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxSubordinateList()', '2022-03-21T11:58:19.935+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 38, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Mon Mar 21 00:00:00 CST 2016, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '子代理发件箱列表查询', 'vagent');
2022-03-21 11:58:23 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:58:23 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:58:23 INFO  http-nio-8008-exec-3 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxSubordinateList192.168.189.1]，描述为 [子代理发件箱列表查询] 的接口
2022-03-21 11:58:23 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:58:23 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (up_agent_id = 35 AND create_time >= '2016-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND sms_number_area = '+853');
2022-03-21 11:58:23 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:58:23 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, timing_time, agent_income_amount, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, number_count, income_amount, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box WHERE (up_agent_id = 35 AND create_time >= '2016-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND sms_number_area = '+853') ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 11:58:23 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:58:23 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxSubordinateList()', '2022-03-21T11:58:23.792+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 20, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Mon Mar 21 00:00:00 CST 2016, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '子代理发件箱列表查询', 'vagent');
2022-03-21 11:58:25 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:58:25 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:58:25 INFO  http-nio-8008-exec-2 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxsubordinateStatistic192.168.189.1]，描述为 [子代理发件箱统计数据] 的接口
2022-03-21 11:58:25 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:58:25 | 耗时 0 ms | SQL 语句：
SELECT COUNT(DISTINCT org_code) AS orgTotal, COUNT(1) AS total, COALESCE(SUM(number_count), 0) AS numberCount, COALESCE(SUM(sms_count), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_box WHERE (up_agent_id = 35 AND create_time >= '2016-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND sms_number_area = '+853');
2022-03-21 11:58:25 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:58:25 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.subordinateStatistic()', '2022-03-21T11:58:25.535+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 21, ' sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Mon Mar 21 00:00:00 CST 2016, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '子代理发件箱统计数据', 'vagent');
2022-03-21 11:58:34 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:58:34 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:58:34 INFO  http-nio-8008-exec-4 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistorySubordinateList192.168.189.1]，描述为 [下级代理历史发件箱列表查询] 的接口
2022-03-21 11:58:34 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:58:34 | 耗时 20 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (up_agent_id = 35 AND create_time >= '2022-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800');
2022-03-21 11:58:34 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 11:58:34 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistorySubordinateList()', '2022-03-21T11:58:34.888+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 40, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Thu Mar 10 00:00:00 CST 2022, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '下级代理历史发件箱列表查询', 'vagent');
2022-03-21 11:58:42 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:58:42 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:58:42 INFO  http-nio-8008-exec-5 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistorySubordinateList192.168.189.1]，描述为 [下级代理历史发件箱列表查询] 的接口
2022-03-21 11:58:42 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:58:42 | 耗时 8 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (up_agent_id = 35 AND create_time >= '2019-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800');
2022-03-21 11:58:42 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:58:42 | 耗时 7 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, agent_income_amount, timing_time, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, income_amount, number_count, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box_history WHERE (up_agent_id = 35 AND create_time >= '2019-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 11:58:42 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 11:58:42 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistorySubordinateList()', '2022-03-21T11:58:42.687+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 34, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Sun Mar 10 00:00:00 CST 2019, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '下级代理历史发件箱列表查询', 'vagent');
2022-03-21 11:59:04 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:59:04 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:59:04 INFO  http-nio-8008-exec-7 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistorySubordinateList192.168.189.1]，描述为 [下级代理历史发件箱列表查询] 的接口
2022-03-21 11:59:04 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:59:04 | 耗时 15 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (up_agent_id = 35 AND create_time >= '2022-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800');
2022-03-21 11:59:04 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 11:59:04 | 耗时 11 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistorySubordinateList()', '2022-03-21T11:59:04.953+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 36, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Thu Mar 10 00:00:00 CST 2022, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '下级代理历史发件箱列表查询', 'vagent');
2022-03-21 11:59:14 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:59:14 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:59:14 INFO  http-nio-8008-exec-9 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistorySubordinateList192.168.189.1]，描述为 [下级代理历史发件箱列表查询] 的接口
2022-03-21 11:59:14 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:59:14 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (up_agent_id = 35 AND create_time >= '2017-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800');
2022-03-21 11:59:14 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:59:14 | 耗时 7 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, agent_income_amount, timing_time, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, income_amount, number_count, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box_history WHERE (up_agent_id = 35 AND create_time >= '2017-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 11:59:14 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 11:59:14 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistorySubordinateList()', '2022-03-21T11:59:14.744+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 29, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Fri Mar 10 00:00:00 CST 2017, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '下级代理历史发件箱列表查询', 'vagent');
2022-03-21 11:59:21 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:59:21 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:59:21 INFO  http-nio-8008-exec-1 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistorySubordinateList192.168.189.1]，描述为 [下级代理历史发件箱列表查询] 的接口
2022-03-21 11:59:21 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:59:21 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (up_agent_id = 35 AND create_time >= '2017-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800' AND sms_number_area = '+852');
2022-03-21 11:59:21 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 11:59:21 | 耗时 10 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistorySubordinateList()', '2022-03-21T11:59:21.297+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 22, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Fri Mar 10 00:00:00 CST 2017, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '下级代理历史发件箱列表查询', 'vagent');
2022-03-21 11:59:24 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:59:24 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:59:24 INFO  http-nio-8008-exec-8 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistorySubordinateList192.168.189.1]，描述为 [下级代理历史发件箱列表查询] 的接口
2022-03-21 11:59:24 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:59:24 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (up_agent_id = 35 AND create_time >= '2017-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800' AND sms_number_area = '+853');
2022-03-21 11:59:24 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 11:59:24 | 耗时 6 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistorySubordinateList()', '2022-03-21T11:59:24.526+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 23, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Fri Mar 10 00:00:00 CST 2017, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '下级代理历史发件箱列表查询', 'vagent');
2022-03-21 11:59:27 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:59:27 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:59:27 INFO  http-nio-8008-exec-3 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistorySubordinateList192.168.189.1]，描述为 [下级代理历史发件箱列表查询] 的接口
2022-03-21 11:59:27 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:59:27 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (up_agent_id = 35 AND create_time >= '2017-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800');
2022-03-21 11:59:27 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:59:27 | 耗时 6 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, agent_income_amount, timing_time, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, income_amount, number_count, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box_history WHERE (up_agent_id = 35 AND create_time >= '2017-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 11:59:27 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 11:59:27 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistorySubordinateList()', '2022-03-21T11:59:27.059+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 27, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Fri Mar 10 00:00:00 CST 2017, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '下级代理历史发件箱列表查询', 'vagent');
2022-03-21 11:59:38 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:59:38 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 11:59:39 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:59:39 | 耗时 3 ms | SQL 语句：
SELECT m.perms FROM t_agent_menu_limit l LEFT JOIN t_agent u ON (u.Id = l.AGENT_ID) LEFT JOIN t_agent_menu m ON (l.MENU_ID = m.MENU_ID) WHERE u.Agent_Account = 'vagent' AND m.perms IS NOT NULL AND m.perms <> '';
2022-03-21 11:59:39 INFO  http-nio-8008-exec-2 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistorySubordinateList192.168.189.1]，描述为 [下级代理历史发件箱列表查询] 的接口
2022-03-21 11:59:39 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:59:39 | 耗时 5 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (up_agent_id = 35 AND create_time >= '2017-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800' AND sms_number_area = '+852');
2022-03-21 11:59:39 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 11:59:39 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistorySubordinateList()', '2022-03-21T11:59:39.044+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 20, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Fri Mar 10 00:00:00 CST 2017, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '下级代理历史发件箱列表查询', 'vagent');
2022-03-21 12:00:23 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 12:00:23 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:00:23 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 12:00:23 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_statistical_agent WHERE (agent_id = 35 AND statistical_date >= '2022-03-14T00:00:00.000+0800' AND statistical_date <= '2022-03-21T00:00:00.000+0800');
2022-03-21 12:00:25 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 12:00:25 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:00:25 INFO  http-nio-8008-exec-9 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordRateSuccess192.168.189.1]，描述为 [查询发送成功率] 的接口
2022-03-21 12:00:25 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 12:00:25 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:00:25 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 12:00:25 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT r.org_code AS orgCode, r.agent_id AS agentId, COUNT(IF(r.state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(r.state = 32, 1, NULL)) AS receiptFail, COUNT(1) AS total, r.send_code AS sendCode, r.sms_content AS smsContent, r.create_time AS createTime FROM t_send_record r WHERE (r.agent_id = 35 AND r.create_time >= '2022-03-21T00:00:00.000+0800' AND r.create_time <= '2022-03-21T23:59:59.000+0800' AND r.`state` & 52 = r.`state`) GROUP BY r.send_code ORDER BY r.create_time DESC ) TOTAL;
2022-03-21 12:00:25 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 12:00:25 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.rateSuccess()', '2022-03-21T12:00:25.106+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 27, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendRecord: "SendRecordQuery(createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送成功率', 'vagent');
2022-03-21 12:00:36 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 12:00:36 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:00:36 INFO  http-nio-8008-exec-3 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordSubordinateList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 12:00:36 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 12:00:36 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND up_agent_id = 35);
2022-03-21 12:00:36 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 12:00:36 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.subordinateList()', '2022-03-21T12:00:36.773+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 27, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendRecord: "SendRecordQuery(createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'vagent');
2022-03-21 12:01:15 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 12:01:15 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:01:15 INFO  http-nio-8008-exec-6 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordSubordinateList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 12:01:15 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 12:01:15 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND up_agent_id = 35);
2022-03-21 12:01:15 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 12:01:15 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.subordinateList()', '2022-03-21T12:01:15.168+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 15, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendRecord: "SendRecordQuery(createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'vagent');
2022-03-21 12:01:40 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 12:01:40 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:01:40 INFO  http-nio-8008-exec-10 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordSubordinateList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 12:01:40 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 12:01:40 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND up_agent_id = 35);
2022-03-21 12:01:40 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 12:01:40 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.subordinateList()', '2022-03-21T12:01:40.296+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 15, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendRecord: "SendRecordQuery(createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'vagent');
2022-03-21 12:01:43 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 12:01:43 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:01:43 INFO  http-nio-8008-exec-7 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordSubordinateList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 12:01:43 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 12:01:43 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND up_agent_id = 35);
2022-03-21 12:01:43 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 12:01:43 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, res_msgid, channel_cost_amount, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, sub_type, up_agent_income_amount FROM t_send_record WHERE (create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND up_agent_id = 35) ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 12:01:43 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 12:01:43 | 耗时 11 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.subordinateList()', '2022-03-21T12:01:43.980+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 21, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendRecord: "SendRecordQuery(createStartTime=Wed Mar 21 00:00:00 CST 2018, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'vagent');
2022-03-21 12:01:47 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 12:01:47 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:01:47 INFO  http-nio-8008-exec-1 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordSubordinateList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 12:01:47 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 12:01:47 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND up_agent_id = 35 AND sms_number_area = '+853');
2022-03-21 12:01:47 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 12:01:47 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, res_msgid, channel_cost_amount, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, sub_type, up_agent_income_amount FROM t_send_record WHERE (create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND up_agent_id = 35 AND sms_number_area = '+853') ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 12:01:47 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 12:01:47 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.subordinateList()', '2022-03-21T12:01:47.657+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 19, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendRecord: "SendRecordQuery(createStartTime=Wed Mar 21 00:00:00 CST 2018, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'vagent');
2022-03-21 12:01:50 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 12:01:50 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:01:50 INFO  http-nio-8008-exec-9 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordSubordinateStatistic192.168.189.1]，描述为 [统计下级代理发送记录数据] 的接口
2022-03-21 12:01:50 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 12:01:50 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record WHERE (create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND up_agent_id = 35 AND sms_number_area = '+853');
2022-03-21 12:01:50 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 12:01:50 | 耗时 5 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.subordinateStatistic()', '2022-03-21T12:01:50.230+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 30, ' sendRecord: "SendRecordQuery(createStartTime=Wed Mar 21 00:00:00 CST 2018, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '统计下级代理发送记录数据', 'vagent');
2022-03-21 12:01:52 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 12:01:52 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:01:52 INFO  http-nio-8008-exec-8 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordSubordinateStatistic192.168.189.1]，描述为 [统计下级代理发送记录数据] 的接口
2022-03-21 12:01:52 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 12:01:52 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record WHERE (create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND up_agent_id = 35);
2022-03-21 12:01:52 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 12:01:52 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.subordinateStatistic()', '2022-03-21T12:01:52.723+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 37, ' sendRecord: "SendRecordQuery(createStartTime=Wed Mar 21 00:00:00 CST 2018, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '统计下级代理发送记录数据', 'vagent');
2022-03-21 12:02:18 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 12:02:18 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:02:18 INFO  http-nio-8008-exec-2 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 12:02:18 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 12:02:18 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND agent_id = 35);
2022-03-21 12:02:18 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 12:02:18 | 耗时 4 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.sendRecordList()', '2022-03-21T12:02:18.833+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 18, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendRecord: "SendRecordQuery(createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'vagent');
2022-03-21 12:02:18 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 12:02:18 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:02:53 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 12:02:53 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:02:53 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 12:02:53 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:02:53 INFO  http-nio-8008-exec-5 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 12:02:53 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 12:02:53 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND agent_id = 35);
2022-03-21 12:02:53 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 12:02:53 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.sendRecordList()', '2022-03-21T12:02:53.457+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 16, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendRecord: "SendRecordQuery(createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'vagent');
2022-03-21 12:02:55 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 12:02:55 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:02:55 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 12:02:55 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_agent_menu_limit l LEFT JOIN t_agent u ON (u.Id = l.AGENT_ID) LEFT JOIN t_agent_menu m ON (l.MENU_ID = m.MENU_ID) WHERE u.Agent_Account = 'vagent' AND m.perms IS NOT NULL AND m.perms <> '';
2022-03-21 12:02:55 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 12:02:55 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:02:56 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 12:02:56 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:02:56 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 12:02:56 | 耗时 1 ms | SQL 语句：
SELECT m.* FROM t_agent_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT l.menu_id FROM t_agent_menu_limit l LEFT JOIN t_agent a ON (a.id = l.agent_id) WHERE a.Agent_Account = 'vagent') ORDER BY m.order_num;
2022-03-21 12:02:56 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 12:02:56 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:02:56 INFO  http-nio-8008-exec-9 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 12:02:56 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 12:02:56 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND agent_id = 35);
2022-03-21 12:02:56 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 12:02:56 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:02:56 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 12:02:56 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.sendRecordList()', '2022-03-21T12:02:56.388+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 16, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendRecord: "SendRecordQuery(createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'vagent');
2022-03-21 12:03:04 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 12:03:04 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:03:04 INFO  http-nio-8008-exec-3 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 12:03:04 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 12:03:04 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND agent_id = 35);
2022-03-21 12:03:04 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 12:03:04 | 耗时 1 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, res_msgid, channel_cost_amount, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, sub_type, up_agent_income_amount FROM t_send_record WHERE (create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND agent_id = 35) ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 12:03:04 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 12:03:04 | 耗时 9 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.sendRecordList()', '2022-03-21T12:03:04.886+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 18, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendRecord: "SendRecordQuery(createStartTime=Wed Mar 21 00:00:00 CST 2018, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'vagent');
2022-03-21 12:03:06 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 12:03:06 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:03:06 INFO  http-nio-8008-exec-2 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordStatistic192.168.189.1]，描述为 [统计发送记录数据] 的接口
2022-03-21 12:03:06 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 12:03:06 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record WHERE (create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND agent_id = 35);
2022-03-21 12:03:06 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 12:03:06 | 耗时 4 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.statistic()', '2022-03-21T12:03:06.746+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 21, ' sendRecord: "SendRecordQuery(createStartTime=Wed Mar 21 00:00:00 CST 2018, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '统计发送记录数据', 'vagent');
2022-03-21 12:03:14 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 12:03:14 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:03:14 INFO  http-nio-8008-exec-6 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 12:03:14 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 12:03:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND agent_id = 35 AND sms_number_area = '+853');
2022-03-21 12:03:14 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 12:03:14 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.sendRecordList()', '2022-03-21T12:03:14.786+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 24, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendRecord: "SendRecordQuery(createStartTime=Wed Mar 21 00:00:00 CST 2018, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'vagent');
2022-03-21 12:03:19 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 12:03:19 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:03:19 INFO  http-nio-8008-exec-4 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 12:03:19 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 12:03:19 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND agent_id = 35);
2022-03-21 12:03:19 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 12:03:19 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, res_msgid, channel_cost_amount, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, sub_type, up_agent_income_amount FROM t_send_record WHERE (create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND agent_id = 35) ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 12:03:19 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 12:03:19 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.sendRecordList()', '2022-03-21T12:03:19.171+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 18, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendRecord: "SendRecordQuery(createStartTime=Wed Mar 21 00:00:00 CST 2018, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'vagent');
2022-03-21 12:03:37 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 12:03:37 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:03:37 INFO  http-nio-8008-exec-10 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 12:03:37 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 12:03:37 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND agent_id = 35 AND sms_number_area = '+853');
2022-03-21 12:03:37 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 12:03:37 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.sendRecordList()', '2022-03-21T12:03:37.328+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 19, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendRecord: "SendRecordQuery(createStartTime=Wed Mar 21 00:00:00 CST 2018, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'vagent');
2022-03-21 12:03:42 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 12:03:42 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:03:42 INFO  http-nio-8008-exec-5 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordStatistic192.168.189.1]，描述为 [统计发送记录数据] 的接口
2022-03-21 12:03:42 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 12:03:42 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record WHERE (create_time >= '2018-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND agent_id = 35 AND sms_number_area = '+853');
2022-03-21 12:03:42 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 12:03:42 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.statistic()', '2022-03-21T12:03:42.101+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 21, ' sendRecord: "SendRecordQuery(createStartTime=Wed Mar 21 00:00:00 CST 2018, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '统计发送记录数据', 'vagent');
2022-03-21 12:04:24 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 12:04:24 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:04:24 INFO  http-nio-8008-exec-8 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordHistoryList192.168.189.1]，描述为 [历史发件箱列表] 的接口
2022-03-21 12:04:24 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 12:04:24 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:04:24 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 12:04:24 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2022-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800' AND agent_id = 35);
2022-03-21 12:04:24 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 12:04:24 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordHistoryController.sendRecordHistoryList()', '2022-03-21T12:04:24.154+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 35, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendRecordHistory: SendRecordHistoryQuery(createStartTime=Thu Mar 10 00:00:00 CST 2022, createEndTime=Thu Mar 10 23:59:59 CST 2022, submitStartTime=null, submitEndTime=null)', '历史发件箱列表', 'vagent');
2022-03-21 12:04:28 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 12:04:28 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 12:04:28 INFO  http-nio-8008-exec-2 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordHistoryList192.168.189.1]，描述为 [历史发件箱列表] 的接口
2022-03-21 12:04:28 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 12:04:28 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2019-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800' AND agent_id = 35);
2022-03-21 12:04:28 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 12:04:28 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordHistoryController.sendRecordHistoryList()', '2022-03-21T12:04:28.412+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 15, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendRecordHistory: SendRecordHistoryQuery(createStartTime=Sun Mar 10 00:00:00 CST 2019, createEndTime=Thu Mar 10 23:59:59 CST 2022, submitStartTime=null, submitEndTime=null)', '历史发件箱列表', 'vagent');
2022-03-21 12:48:41 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Validating all active sessions...
2022-03-21 12:48:41 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Finished session validation.  No sessions were stopped.
2022-03-21 13:48:42 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Validating all active sessions...
2022-03-21 13:48:42 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Finished session validation.  No sessions were stopped.
2022-03-21 14:48:42 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Validating all active sessions...
2022-03-21 14:48:42 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Finished session validation.  No sessions were stopped.
2022-03-21 15:17:51 INFO  http-nio-8008-exec-5 p6spy 2022-03-21 15:17:51 | 耗时 1 ms | SQL 语句：
SELECT id, agent_id, approve_state_code, system_name, create_time, remark, system_url, system_logo_url FROM t_agent_system_config WHERE (system_url = '192.168.189.1' AND approve_state_code = '2');
2022-03-21 15:18:51 INFO  http-nio-8008-exec-3 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_loginBehavior192.168.189.1]，描述为 [登录行为验证] 的接口
2022-03-21 15:18:52 INFO  http-nio-8008-exec-8 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_login192.168.189.1]，描述为 [登录接口] 的接口
2022-03-21 15:18:52 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:18:52 | 耗时 2 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:18:52 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:18:52 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, approve_state_code, system_name, create_time, remark, system_url, system_logo_url FROM t_agent_system_config WHERE (agent_id = 35 AND approve_state_code = '2');
2022-03-21 15:18:52 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:18:52 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:18:52 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:18:52 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:18:52 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:18:52 | 耗时 2 ms | SQL 语句：
UPDATE t_agent SET Google_Key = '', Cash_Amount = 1200, Description = '', Remark = '169.254.130.216', Agent_Password = '036de319cfeff912ab2d6e2d6b4a7ba4', Last_Login_IP = '内网IP|0|0|内网IP|内网IP', Level_Code = '1', Available_Amount = 4842073, Login_IP = '192.168.189.1', EMail = '', Need_Bind_Google_Key = 0, Create_Date = '2020-03-31T15:41:25.000+0800', QQ = '', Agent_Account = 'vagent', Amount = 1100, Quota_Amount = 0, Agent_Name = '正式商户棋牌代理', Login_Faild_Count = 0, Data_MD5 = '2F3BCDEFDCB06E4813B5199D96E9D645', Last_Login_Time = '2022-03-21 11:29:34', Phone_Number = '', Day_Limit = 0, Send_Sms_Total = 484139, Create_User = 'admin', State_Code = '1', Pay_Password = '4297F44B13955235245B2497399D7A93' WHERE Id = 35;
2022-03-21 15:18:52 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:18:52 | 耗时 0 ms | SQL 语句：
UPDATE t_agent SET Last_Login_IP = '内网IP|0|0|内网IP|内网IP', Login_IP = '192.168.189.1', Last_Login_Time = '2022-03-21 15:18:52' WHERE (Agent_Account = 'vagent');
2022-03-21 15:18:52 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:18:52 | 耗时 1 ms | SQL 语句：
INSERT INTO t_agent_login_log (Agent_Account, TimeConsuming, Login_State, Local_Ip, Message) VALUES ('vagent', 161, 1, '192.168.189.1', '登录成功');
2022-03-21 15:18:52 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:18:52 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.LoginController.login()', '2022-03-21T15:18:52.544+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 182, ' username: "vagent" password: "保密" verifyCode: "actme" goologoVerifyCode: "" sessionToken: "8f71c01e5db9bc4ba2165fe521ce51b7" behaviorCheckToken: "6eb57b06e3fdedfd388e0dec9c9a883a" verifyInfoToken: "E6FD0027B0ECF76FE94F40C9FF0010FF" rememberMe: "false" request: org.apache.shiro.web.servlet.ShiroHttpServletRequest@190a026', '登录', 'vagent');
2022-03-21 15:18:52 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:18:52 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:18:52 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:18:52 | 耗时 4 ms | SQL 语句：
SELECT m.perms FROM t_agent_menu_limit l LEFT JOIN t_agent u ON (u.Id = l.AGENT_ID) LEFT JOIN t_agent_menu m ON (l.MENU_ID = m.MENU_ID) WHERE u.Agent_Account = 'vagent' AND m.perms IS NOT NULL AND m.perms <> '';
2022-03-21 15:18:52 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:18:52 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:18:53 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:18:53 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:18:53 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:18:53 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_agent_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT l.menu_id FROM t_agent_menu_limit l LEFT JOIN t_agent a ON (a.id = l.agent_id) WHERE a.Agent_Account = 'vagent') ORDER BY m.order_num;
2022-03-21 15:18:53 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:18:53 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:18:53 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 15:18:53 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:18:53 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:18:53 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_organization WHERE (Agent_Id = 35);
2022-03-21 15:18:53 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:18:53 | 耗时 1 ms | SQL 语句：
SELECT `org_code`, COUNT(1) AS total, COUNT(IF(`state` & 52 = `state`, 1, NULL)) AS successTotal, COUNT(IF(`state` = 8, 1, NULL)) AS failTotal, SUM(`agent_income_amount`) AS successAmount, SUM(`up_agent_income_amount`) AS upAgentSuccessAmount, SUM(`consume_amount`) AS consumeAmount FROM t_send_record WHERE (Agent_Id = 35 AND create_time >= '2022-03-21 00:00:00' AND `state` & 62 = `state`) GROUP BY org_code;
2022-03-21 15:18:53 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:18:53 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE Id = 35;
2022-03-21 15:18:53 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:18:53 | 耗时 1 ms | SQL 语句：
SELECT `org_code`, COUNT(1) AS total, COUNT(IF(`state` & 52 = `state`, 1, NULL)) AS successTotal, COUNT(IF(`state` = 8, 1, NULL)) AS failTotal, SUM(`agent_income_amount`) AS successAmount, SUM(`up_agent_income_amount`) AS upAgentSuccessAmount, SUM(`consume_amount`) AS consumeAmount FROM t_send_record WHERE (`up_agent_id` = 35 AND create_time >= '2022-03-21 00:00:00' AND `state` & 62 = `state`) GROUP BY org_code;
2022-03-21 15:19:09 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 15:19:09 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_agent_menu_limit l LEFT JOIN t_agent u ON (u.Id = l.AGENT_ID) LEFT JOIN t_agent_menu m ON (l.MENU_ID = m.MENU_ID) WHERE u.Agent_Account = 'vagent' AND m.perms IS NOT NULL AND m.perms <> '';
2022-03-21 15:19:09 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 15:19:09 | 耗时 2 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:19:09 INFO  http-nio-8008-exec-1 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordSubordinateList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 15:19:09 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 15:19:09 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND up_agent_id = 35);
2022-03-21 15:19:09 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 15:19:09 | 耗时 4 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.subordinateList()', '2022-03-21T15:19:09.250+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 24, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendRecord: "SendRecordQuery(createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'vagent');
2022-03-21 15:19:09 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:19:09 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:19:09 INFO  http-nio-8008-exec-8 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordHistorySubordinateList192.168.189.1]，描述为 [历史发件箱列表] 的接口
2022-03-21 15:19:10 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:19:10 | 耗时 32 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2022-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800' AND up_agent_id = 35);
2022-03-21 15:19:10 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:19:10 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordHistoryController.subordinateList()', '2022-03-21T15:19:10.011+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 50, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendRecordHistory: SendRecordHistoryQuery(createStartTime=Thu Mar 10 00:00:00 CST 2022, createEndTime=Thu Mar 10 23:59:59 CST 2022, submitStartTime=null, submitEndTime=null)', '历史发件箱列表', 'vagent');
2022-03-21 15:19:39 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:19:39 | 耗时 2 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:19:39 INFO  http-nio-8008-exec-2 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordHistorySubordinateList192.168.189.1]，描述为 [历史发件箱列表] 的接口
2022-03-21 15:19:39 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:19:39 | 耗时 14 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2022-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800' AND up_agent_id = 35);
2022-03-21 15:19:39 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:19:39 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordHistoryController.subordinateList()', '2022-03-21T15:19:39.717+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 29, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendRecordHistory: SendRecordHistoryQuery(createStartTime=Thu Mar 10 00:00:00 CST 2022, createEndTime=Thu Mar 10 23:59:59 CST 2022, submitStartTime=null, submitEndTime=null)', '历史发件箱列表', 'vagent');
2022-03-21 15:19:46 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 15:19:46 | 耗时 9 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:19:46 INFO  http-nio-8008-exec-6 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordHistorySubordinateList192.168.189.1]，描述为 [历史发件箱列表] 的接口
2022-03-21 15:19:47 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 15:19:47 | 耗时 12 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2022-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800' AND up_agent_id = 35 AND sms_number_area = '+81');
2022-03-21 15:19:47 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 15:19:47 | 耗时 7 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordHistoryController.subordinateList()', '2022-03-21T15:19:47.014+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 28, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendRecordHistory: SendRecordHistoryQuery(createStartTime=Thu Mar 10 00:00:00 CST 2022, createEndTime=Thu Mar 10 23:59:59 CST 2022, submitStartTime=null, submitEndTime=null)', '历史发件箱列表', 'vagent');
2022-03-21 15:19:58 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:19:58 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:19:58 INFO  http-nio-8008-exec-4 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordHistorySubordinateList192.168.189.1]，描述为 [历史发件箱列表] 的接口
2022-03-21 15:19:58 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:19:58 | 耗时 15 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2016-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800' AND up_agent_id = 35 AND sms_number_area = '+86');
2022-03-21 15:19:58 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:19:58 | 耗时 12 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, channel_cost_amount, res_msgid, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, up_agent_income_amount FROM t_send_record_history WHERE (create_time >= '2016-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800' AND up_agent_id = 35 AND sms_number_area = '+86') ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 15:19:58 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:19:58 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordHistoryController.subordinateList()', '2022-03-21T15:19:58.756+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 49, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendRecordHistory: SendRecordHistoryQuery(createStartTime=Thu Mar 10 00:00:00 CST 2016, createEndTime=Thu Mar 10 23:59:59 CST 2022, submitStartTime=null, submitEndTime=null)', '历史发件箱列表', 'vagent');
2022-03-21 15:20:03 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 15:20:03 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:20:03 INFO  http-nio-8008-exec-10 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordHistorySubordinateList192.168.189.1]，描述为 [历史发件箱列表] 的接口
2022-03-21 15:20:03 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 15:20:03 | 耗时 19 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2016-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800' AND up_agent_id = 35 AND sms_number_area = '+853');
2022-03-21 15:20:03 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 15:20:03 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordHistoryController.subordinateList()', '2022-03-21T15:20:03.275+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 35, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendRecordHistory: SendRecordHistoryQuery(createStartTime=Thu Mar 10 00:00:00 CST 2016, createEndTime=Thu Mar 10 23:59:59 CST 2022, submitStartTime=null, submitEndTime=null)', '历史发件箱列表', 'vagent');
2022-03-21 15:20:09 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 15:20:09 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:20:09 INFO  http-nio-8008-exec-7 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxSubordinateList192.168.189.1]，描述为 [子代理发件箱列表查询] 的接口
2022-03-21 15:20:09 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 15:20:09 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (timing_time IS NOT NULL AND up_agent_id = 35);
2022-03-21 15:20:09 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 15:20:09 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, timing_time, agent_income_amount, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, number_count, income_amount, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box WHERE (timing_time IS NOT NULL AND up_agent_id = 35) ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 15:20:09 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 15:20:09 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxSubordinateList()', '2022-03-21T15:20:09.098+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 23, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBox: "SendBoxQuery(isTiming=true, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=null, createEndTime=null, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '子代理发件箱列表查询', 'vagent');
2022-03-21 15:21:16 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:21:16 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:21:16 INFO  http-nio-8008-exec-3 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxSubordinateList192.168.189.1]，描述为 [子代理发件箱列表查询] 的接口
2022-03-21 15:21:16 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:21:16 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (timing_time IS NOT NULL AND up_agent_id = 35);
2022-03-21 15:21:16 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:21:16 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, timing_time, agent_income_amount, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, number_count, income_amount, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box WHERE (timing_time IS NOT NULL AND up_agent_id = 35) ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 15:21:16 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:21:16 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxSubordinateList()', '2022-03-21T15:21:16.294+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 18, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBox: "SendBoxQuery(isTiming=true, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=null, createEndTime=null, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '子代理发件箱列表查询', 'vagent');
2022-03-21 15:22:30 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 15:22:30 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:22:30 INFO  http-nio-8008-exec-6 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxSubordinateList192.168.189.1]，描述为 [子代理发件箱列表查询] 的接口
2022-03-21 15:22:31 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 15:22:31 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (timing_time IS NOT NULL AND up_agent_id = 35 AND sms_number_area = '+853');
2022-03-21 15:22:31 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 15:22:31 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxSubordinateList()', '2022-03-21T15:22:31.003+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 20, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBox: "SendBoxQuery(isTiming=true, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=null, createEndTime=null, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '子代理发件箱列表查询', 'vagent');
2022-03-21 15:22:33 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:22:33 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:22:33 INFO  http-nio-8008-exec-4 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxSubordinateList192.168.189.1]，描述为 [子代理发件箱列表查询] 的接口
2022-03-21 15:22:33 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:22:33 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (timing_time IS NOT NULL AND up_agent_id = 35);
2022-03-21 15:22:33 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:22:33 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, send_code, sms_number_area, type, audit_state, create_username, refuse_cause, org_code, channel_cost_amount, timing_time, agent_income_amount, sms_content, sms_type, is_timing_time, up_agent_id, consume_amount, sms_count, number_count, income_amount, create_time, client_ip, sms_words, sub_type, sorting_time, up_agent_income_amount FROM t_send_box WHERE (timing_time IS NOT NULL AND up_agent_id = 35) ORDER BY create_time DESC LIMIT 0,10;
2022-03-21 15:22:33 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:22:33 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxSubordinateList()', '2022-03-21T15:22:33.857+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 18, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBox: "SendBoxQuery(isTiming=true, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=null, createEndTime=null, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '子代理发件箱列表查询', 'vagent');
2022-03-21 15:24:04 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 15:24:04 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, approve_state_code, system_name, create_time, remark, system_url, system_logo_url FROM t_agent_system_config WHERE (system_url = '192.168.189.1' AND approve_state_code = '2');
2022-03-21 15:24:22 INFO  http-nio-8008-exec-8 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_loginBehavior192.168.189.1]，描述为 [登录行为验证] 的接口
2022-03-21 15:24:23 INFO  http-nio-8008-exec-3 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_login192.168.189.1]，描述为 [登录接口] 的接口
2022-03-21 15:24:23 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:24:23 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:24:23 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:24:23 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, approve_state_code, system_name, create_time, remark, system_url, system_logo_url FROM t_agent_system_config WHERE (agent_id = 35 AND approve_state_code = '2');
2022-03-21 15:24:23 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:24:23 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:24:23 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:24:23 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:24:23 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:24:23 | 耗时 4 ms | SQL 语句：
UPDATE t_agent SET Google_Key = '', Cash_Amount = 1200, Description = '', Remark = '169.254.130.216', Agent_Password = '036de319cfeff912ab2d6e2d6b4a7ba4', Last_Login_IP = '内网IP|0|0|内网IP|内网IP', Level_Code = '1', Available_Amount = 4842073, Login_IP = '192.168.189.1', EMail = '', Need_Bind_Google_Key = 0, Create_Date = '2020-03-31T15:41:25.000+0800', QQ = '', Agent_Account = 'vagent', Amount = 1100, Quota_Amount = 0, Agent_Name = '正式商户棋牌代理', Login_Faild_Count = 0, Data_MD5 = '2F3BCDEFDCB06E4813B5199D96E9D645', Last_Login_Time = '2022-03-21 15:18:52', Phone_Number = '', Day_Limit = 0, Send_Sms_Total = 484139, Create_User = 'admin', State_Code = '1', Pay_Password = '4297F44B13955235245B2497399D7A93' WHERE Id = 35;
2022-03-21 15:24:23 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:24:23 | 耗时 1 ms | SQL 语句：
UPDATE t_agent SET Last_Login_IP = '内网IP|0|0|内网IP|内网IP', Login_IP = '192.168.189.1', Last_Login_Time = '2022-03-21 15:24:23' WHERE (Agent_Account = 'vagent');
2022-03-21 15:24:23 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:24:23 | 耗时 1 ms | SQL 语句：
INSERT INTO t_agent_login_log (Agent_Account, TimeConsuming, Login_State, Local_Ip, Message) VALUES ('vagent', 109, 1, '192.168.189.1', '登录成功');
2022-03-21 15:24:23 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:24:23 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.LoginController.login()', '2022-03-21T15:24:23.348+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 131, ' username: "vagent" password: "保密" verifyCode: "4cndm" goologoVerifyCode: "" sessionToken: "f5b2f74addcb0f34203815dc8af501e0" behaviorCheckToken: "c55d08aa7fb4eafca0ff2f216dfb03ce" verifyInfoToken: "E6FD0027B0ECF76FE94F40C9FF0010FF" rememberMe: "false" request: org.apache.shiro.web.servlet.ShiroHttpServletRequest@2b48d5ca', '登录', 'vagent');
2022-03-21 15:24:23 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:24:23 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:24:23 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:24:23 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_agent_menu_limit l LEFT JOIN t_agent u ON (u.Id = l.AGENT_ID) LEFT JOIN t_agent_menu m ON (l.MENU_ID = m.MENU_ID) WHERE u.Agent_Account = 'vagent' AND m.perms IS NOT NULL AND m.perms <> '';
2022-03-21 15:24:23 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:24:23 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:24:24 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:24:24 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:24:24 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:24:24 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_agent_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT l.menu_id FROM t_agent_menu_limit l LEFT JOIN t_agent a ON (a.id = l.agent_id) WHERE a.Agent_Account = 'vagent') ORDER BY m.order_num;
2022-03-21 15:24:24 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 15:24:24 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:24:24 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:24:24 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:24:24 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:24:24 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_organization WHERE (Agent_Id = 35);
2022-03-21 15:24:24 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:24:24 | 耗时 1 ms | SQL 语句：
SELECT `org_code`, COUNT(1) AS total, COUNT(IF(`state` & 52 = `state`, 1, NULL)) AS successTotal, COUNT(IF(`state` = 8, 1, NULL)) AS failTotal, SUM(`agent_income_amount`) AS successAmount, SUM(`up_agent_income_amount`) AS upAgentSuccessAmount, SUM(`consume_amount`) AS consumeAmount FROM t_send_record WHERE (Agent_Id = 35 AND create_time >= '2022-03-21 00:00:00' AND `state` & 62 = `state`) GROUP BY org_code;
2022-03-21 15:24:24 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:24:24 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE Id = 35;
2022-03-21 15:24:24 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:24:24 | 耗时 1 ms | SQL 语句：
SELECT `org_code`, COUNT(1) AS total, COUNT(IF(`state` & 52 = `state`, 1, NULL)) AS successTotal, COUNT(IF(`state` = 8, 1, NULL)) AS failTotal, SUM(`agent_income_amount`) AS successAmount, SUM(`up_agent_income_amount`) AS upAgentSuccessAmount, SUM(`consume_amount`) AS consumeAmount FROM t_send_record WHERE (`up_agent_id` = 35 AND create_time >= '2022-03-21 00:00:00' AND `state` & 62 = `state`) GROUP BY org_code;
2022-03-21 15:24:27 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 15:24:27 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_agent_menu_limit l LEFT JOIN t_agent u ON (u.Id = l.AGENT_ID) LEFT JOIN t_agent_menu m ON (l.MENU_ID = m.MENU_ID) WHERE u.Agent_Account = 'vagent' AND m.perms IS NOT NULL AND m.perms <> '';
2022-03-21 15:24:27 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 15:24:27 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:24:27 INFO  http-nio-8008-exec-1 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxList192.168.189.1]，描述为 [发件箱列表查询] 的接口
2022-03-21 15:24:27 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 15:24:27 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (timing_time IS NOT NULL AND agent_id = 35);
2022-03-21 15:24:27 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 15:24:27 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxList()', '2022-03-21T15:24:27.802+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 16, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBox: "SendBoxQuery(isTiming=true, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=null, createEndTime=null, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '发件箱列表查询', 'vagent');
2022-03-21 15:24:33 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 15:24:33 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:24:33 INFO  http-nio-8008-exec-9 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxList192.168.189.1]，描述为 [发件箱列表查询] 的接口
2022-03-21 15:24:33 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 15:24:33 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (timing_time IS NOT NULL AND agent_id = 35 AND sms_number_area = '+86');
2022-03-21 15:24:33 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 15:24:33 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxList()', '2022-03-21T15:24:33.515+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 22, ' request: "QueryRequest(pageSize=10, pageNum=1, field=createTime, order=)" sendBox: "SendBoxQuery(isTiming=true, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=null, createEndTime=null, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '发件箱列表查询', 'vagent');
2022-03-21 15:24:51 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:24:51 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'vagent');
2022-03-21 15:24:51 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:24:51 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_organization WHERE (Agent_Id = 35);
2022-03-21 15:24:51 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:24:51 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization WHERE (Agent_Id = 35) ORDER BY Id DESC LIMIT 0,10;
2022-03-21 15:24:51 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:24:51 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.organization.OrganizationController.organizationList()', '2022-03-21T15:24:51.558+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 14, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" organization: "Organization(id=null, agentId=35, businessUserId=null, organizationName=null, organizationCode=null, contact=null, contactMobile=null, email=null, address=null, webUrl=null, amount=null, availableAmount=null, cashAmount=null, sendSmsTotal=null, status=null, approveStateCode=null, smsSign=null, chargesType=null, settlementType=null, smsApproveType=null, interfaceType=null, md5Key=null, bindIp=null, notifyUrl=null, dataMd5=null, description=null, remark=null, createUser=null, createDate=null)"', '商户列表', 'vagent');
2022-03-21 15:24:52 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 15:24:52 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization WHERE (Id = '117' AND Agent_Id = 35);
2022-03-21 15:24:52 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 15:24:52 | 耗时 2 ms | SQL 语句：
SELECT Id, Cost_Name, Cost_Value, Organization_Code, Description, Remark, sms_type, State, Operator, Channel_Id, Create_Date FROM t_organization_cost WHERE (Organization_Code = 'SMS210306175250BLLX');
2022-03-21 15:24:52 INFO  http-nio-8008-exec-6 p6spy 2022-03-21 15:24:52 | 耗时 1 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 35);
2022-03-21 15:25:05 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 15:25:05 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, approve_state_code, system_name, create_time, remark, system_url, system_logo_url FROM t_agent_system_config WHERE (system_url = '192.168.189.1' AND approve_state_code = '2');
2022-03-21 15:25:15 INFO  http-nio-8008-exec-3 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_loginBehavior192.168.189.1]，描述为 [登录行为验证] 的接口
2022-03-21 15:25:16 INFO  http-nio-8008-exec-8 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 2 次访问key为 [limit_login192.168.189.1]，描述为 [登录接口] 的接口
2022-03-21 15:25:16 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:25:16 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:16 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:25:16 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, approve_state_code, system_name, create_time, remark, system_url, system_logo_url FROM t_agent_system_config WHERE (agent_id = 36 AND approve_state_code = '2');
2022-03-21 15:25:16 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:25:16 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:16 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:25:16 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:16 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:25:16 | 耗时 5 ms | SQL 语句：
UPDATE t_agent SET Cash_Amount = 0, Description = 'qs1', Remark = '169.254.130.216', Agent_Password = 'd3cdd3d3a705d491413f610000a93419', Last_Login_IP = '内网IP|0|0|内网IP|内网IP', Level_Code = '2', Available_Amount = 4784363, Login_IP = '169.254.130.216', EMail = '', Need_Bind_Google_Key = 0, Create_Date = '2020-03-31T15:42:17.000+0800', QQ = '', Up_Agent_Id = 35, Agent_Account = 'subagent', Amount = 6000, Quota_Amount = 6000, Agent_Name = '正式商户网贷代理', Login_Faild_Count = 0, Data_MD5 = 'AADEF8E1C63E7930B3447A1F98811035', Last_Login_Time = '2021-09-15 12:38:37', Phone_Number = '', Send_Sms_Total = 464703, Create_User = 'admin', State_Code = '1', Pay_Password = '4297F44B13955235245B2497399D7A93' WHERE Id = 36;
2022-03-21 15:25:16 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:25:16 | 耗时 1 ms | SQL 语句：
UPDATE t_agent SET Last_Login_IP = '内网IP|0|0|内网IP|内网IP', Login_IP = '192.168.189.1', Last_Login_Time = '2022-03-21 15:25:16' WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:16 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:25:16 | 耗时 1 ms | SQL 语句：
INSERT INTO t_agent_login_log (Agent_Account, TimeConsuming, Login_State, Local_Ip, Message) VALUES ('subagent', 106, 1, '192.168.189.1', '登录成功');
2022-03-21 15:25:16 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:25:16 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.LoginController.login()', '2022-03-21T15:25:16.420+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 124, ' username: "subagent" password: "保密" verifyCode: "2UWMY" goologoVerifyCode: "" sessionToken: "95547ca71806665f10594f77e085f597" behaviorCheckToken: "8709d668804fffb08d406cd565297e77" verifyInfoToken: "E6FD0027B0ECF76FE94F40C9FF0010FF" rememberMe: "false" request: org.apache.shiro.web.servlet.ShiroHttpServletRequest@29a466d5', '登录', 'subagent');
2022-03-21 15:25:16 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:25:16 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:16 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:25:16 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_agent_menu_limit l LEFT JOIN t_agent u ON (u.Id = l.AGENT_ID) LEFT JOIN t_agent_menu m ON (l.MENU_ID = m.MENU_ID) WHERE u.Agent_Account = 'subagent' AND m.perms IS NOT NULL AND m.perms <> '';
2022-03-21 15:25:16 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:25:16 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:17 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:25:17 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:17 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:25:17 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_agent_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT l.menu_id FROM t_agent_menu_limit l LEFT JOIN t_agent a ON (a.id = l.agent_id) WHERE a.Agent_Account = 'subagent') ORDER BY m.order_num;
2022-03-21 15:25:17 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:25:17 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:17 INFO  http-nio-8008-exec-2 p6spy 2022-03-21 15:25:17 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:17 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:25:17 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_organization WHERE (Agent_Id = 36);
2022-03-21 15:25:17 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:25:17 | 耗时 0 ms | SQL 语句：
SELECT `org_code`, COUNT(1) AS total, COUNT(IF(`state` & 52 = `state`, 1, NULL)) AS successTotal, COUNT(IF(`state` = 8, 1, NULL)) AS failTotal, SUM(`agent_income_amount`) AS successAmount, SUM(`up_agent_income_amount`) AS upAgentSuccessAmount, SUM(`consume_amount`) AS consumeAmount FROM t_send_record WHERE (Agent_Id = 36 AND create_time >= '2022-03-21 00:00:00' AND `state` & 62 = `state`) GROUP BY org_code;
2022-03-21 15:25:17 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:25:17 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE Id = 36;
2022-03-21 15:25:21 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 15:25:21 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_agent_menu_limit l LEFT JOIN t_agent u ON (u.Id = l.AGENT_ID) LEFT JOIN t_agent_menu m ON (l.MENU_ID = m.MENU_ID) WHERE u.Agent_Account = 'subagent' AND m.perms IS NOT NULL AND m.perms <> '';
2022-03-21 15:25:22 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 15:25:22 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:22 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 15:25:22 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_organization WHERE (Agent_Id = 36);
2022-03-21 15:25:22 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 15:25:22 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization WHERE (Agent_Id = 36) ORDER BY Id DESC LIMIT 0,10;
2022-03-21 15:25:22 INFO  http-nio-8008-exec-9 p6spy 2022-03-21 15:25:22 | 耗时 4 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.organization.OrganizationController.organizationList()', '2022-03-21T15:25:22.172+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 7, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" organization: "Organization(id=null, agentId=36, businessUserId=null, organizationName=null, organizationCode=null, contact=null, contactMobile=null, email=null, address=null, webUrl=null, amount=null, availableAmount=null, cashAmount=null, sendSmsTotal=null, status=null, approveStateCode=null, smsSign=null, chargesType=null, settlementType=null, smsApproveType=null, interfaceType=null, md5Key=null, bindIp=null, notifyUrl=null, dataMd5=null, description=null, remark=null, createUser=null, createDate=null)"', '商户列表', 'subagent');
2022-03-21 15:25:23 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:25:23 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization WHERE (Id = '114' AND Agent_Id = 36);
2022-03-21 15:25:23 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:25:23 | 耗时 0 ms | SQL 语句：
SELECT Id, Cost_Name, Cost_Value, Organization_Code, Description, Remark, sms_type, State, Operator, Channel_Id, Create_Date FROM t_organization_cost WHERE (Organization_Code = 'SMS210305203702PDDO');
2022-03-21 15:25:23 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:25:23 | 耗时 0 ms | SQL 语句：
SELECT Id, Agent_Id, Name, Description, Remark, sms_type, Value, Operator, Channel_Id, Create_Date FROM t_agent_cost WHERE (Agent_Id = 36);
2022-03-21 15:25:38 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:25:38 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:38 INFO  http-nio-8008-exec-10 p6spy 2022-03-21 15:25:38 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:38 INFO  http-nio-8008-exec-4 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxList192.168.189.1]，描述为 [发件箱列表查询] 的接口
2022-03-21 15:25:38 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:25:38 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (agent_id = 36 AND create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800');
2022-03-21 15:25:38 INFO  http-nio-8008-exec-4 p6spy 2022-03-21 15:25:38 | 耗时 2 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxList()', '2022-03-21T15:25:38.660+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 18, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBox: "SendBoxQuery(isTiming=null, isTimingFlag=null, isSortingFlag=null, leTimingTime=null, isNeedSmsNumber=false, sortingStartTime=null, sortingEndTime=null, createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, moblieFile=null, excludeAuditState=null, ids=null, auditState=null, sessionToken=null, isLongSms=null)"', '发件箱列表查询', 'subagent');
2022-03-21 15:25:42 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 15:25:42 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:42 INFO  http-nio-8008-exec-1 p6spy 2022-03-21 15:25:42 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:42 INFO  http-nio-8008-exec-7 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendBoxHistoryList192.168.189.1]，描述为 [代理历史发件箱列表查询] 的接口
2022-03-21 15:25:42 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 15:25:42 | 耗时 14 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box_history WHERE (agent_id = 36 AND create_time >= '2022-03-10T00:00:00.000+0800' AND create_time <= '2022-03-10T23:59:59.000+0800');
2022-03-21 15:25:42 INFO  http-nio-8008-exec-7 p6spy 2022-03-21 15:25:42 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendBoxController.sendBoxHistoryList()', '2022-03-21T15:25:42.120+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 32, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendBoxHistory: SendBoxHistoryQuery(isTiming=null, isTimingFlag=null, leTimingTime=null, sortingStartTime=null, sortingEndTime=null, createStartTime=Thu Mar 10 00:00:00 CST 2022, createEndTime=Thu Mar 10 23:59:59 CST 2022, isLongSms=null)', '代理历史发件箱列表查询', 'subagent');
2022-03-21 15:25:44 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:25:44 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:44 INFO  http-nio-8008-exec-3 p6spy 2022-03-21 15:25:44 | 耗时 0 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent WHERE (Agent_Account = 'subagent');
2022-03-21 15:25:44 INFO  http-nio-8008-exec-8 com.hero.sms.common.aspect.LimitAspect IP:192.168.189.1 第 1 次访问key为 [limit_agentSendRecordList192.168.189.1]，描述为 [查询发送记录] 的接口
2022-03-21 15:25:44 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:25:44 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2022-03-21T00:00:00.000+0800' AND create_time <= '2022-03-21T23:59:59.000+0800' AND agent_id = 36);
2022-03-21 15:25:44 INFO  http-nio-8008-exec-8 p6spy 2022-03-21 15:25:44 | 耗时 3 ms | SQL 语句：
INSERT INTO t_agent_log (METHOD, CREATE_TIME, IP, location, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.sendRecordList()', '2022-03-21T15:25:44.644+0800', '192.168.189.1', '内网IP|0|0|内网IP|内网IP', 30, ' request: "QueryRequest(pageSize=10, pageNum=1, field=null, order=null)" sendRecord: "SendRecordQuery(createStartTime=Mon Mar 21 00:00:00 CST 2022, createEndTime=Mon Mar 21 23:59:59 CST 2022, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null, resMsgidIsNullFlag=null)"', '查询发送记录', 'subagent');
2022-03-21 15:46:47 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin Application shutdown requested.
2022-03-21 15:46:47 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2022-03-21 15:46:47 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2022-03-21 15:46:47 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2022-03-21 15:46:47 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2022-03-21 15:46:47 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2022-03-21 15:46:47 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2022-03-21 15:46:47 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2022-03-21 15:46:47 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2022-03-21 15:46:47 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2022-03-21 15:46:47 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2022-03-21 15:46:47 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2022-03-21 15:46:47 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
