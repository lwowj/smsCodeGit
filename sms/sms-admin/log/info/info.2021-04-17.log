2021-04-17 16:24:01 INFO  main com.hero.sms.SmsApplication Starting SmsApplication on LAPTOP-L07PL5KH with PID 20692 (C:\work\workspaceSmsUs\sms\sms-admin\target\classes started by payBoo in C:\work\workspaceSmsUs\sms\sms-admin)
2021-04-17 16:24:01 INFO  main com.hero.sms.SmsApplication The following profiles are active: test
2021-04-17 16:24:04 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2021-04-17 16:24:04 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2021-04-17 16:24:05 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 605ms. Found 0 repository interfaces.
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$9a095a7c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [com.hero.sms.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$54cb22c7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.hero.sms.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$139505b4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.hero.sms.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$261e7a38] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$6e435645] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:06 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2021-04-17 16:24:06 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2021-04-17 16:24:06 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2021-04-17 16:24:06 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2021-04-17 16:24:06 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2021-04-17 16:24:06 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2021-04-17 16:24:06 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2021-04-17 16:24:06 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy120] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.hero.sms.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.hero.sms.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy124] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy125] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.hero.sms.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.hero.sms.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy128] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.hero.sms.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:09 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.hero.sms.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:11 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:24:11 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8808 (http)
2021-04-17 16:24:11 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8808"]
2021-04-17 16:24:11 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2021-04-17 16:24:11 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.27]
2021-04-17 16:24:12 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2021-04-17 16:24:12 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 10514 ms
2021-04-17 16:24:13 INFO  main com.hero.sms.common.xss.XssFilter ------------ xss filter init ------------
2021-04-17 16:24:16 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2021-04-17 16:24:16 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2021-04-17 16:24:16 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2021-04-17 16:24:16 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2021-04-17 16:24:16 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2021-04-17 16:24:16 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-L07PL5KH1618647856010'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2021-04-17 16:24:16 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2021-04-17 16:24:16 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2021-04-17 16:24:16 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@57777c23
2021-04-17 16:24:16 INFO  main p6spy 2021-04-17 16:24:16 | 耗时 9 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2021-04-17 16:24:17 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2021-04-17 16:24:17 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2021-04-17 16:24:17 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2021-04-17 16:24:17 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2021-04-17 16:24:18 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2021-04-17 16:24:18 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2021-04-17 16:24:18 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2021-04-17 16:24:18 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Skipping initializing disabled plugin bean swagger v2.0
2021-04-17 16:24:18 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2021-04-17 16:24:18 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8808"]
2021-04-17 16:24:18 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8808 (http) with context path ''
2021-04-17 16:24:18 INFO  main com.hero.sms.SmsApplication Started SmsApplication in 18.268 seconds (JVM running for 21.1)
2021-04-17 16:24:18 INFO  main com.hero.sms.common.DatabaseCache 开始缓存字典
2021-04-17 16:24:18 INFO  main p6spy 2021-04-17 16:24:18 | 耗时 4 ms | SQL 语句：
SELECT ID, CODE, CREATE_TIME, ORDER_LEVEL, PARENT_CODE, IS_DELETE, NAME, DESCRIPTION, REMARK, SORT_CODE FROM code WHERE (IS_DELETE = '0');
2021-04-17 16:24:18 INFO  main com.hero.sms.common.DatabaseCache 缓存代理信息
2021-04-17 16:24:18 INFO  main p6spy 2021-04-17 16:24:18 | 耗时 3 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent;
2021-04-17 16:24:18 INFO  main com.hero.sms.common.DatabaseCache 缓存商户信息
2021-04-17 16:24:18 INFO  main p6spy 2021-04-17 16:24:18 | 耗时 4 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization;
2021-04-17 16:24:18 INFO  main com.hero.sms.common.DatabaseCache 缓存短信通道信息
2021-04-17 16:24:18 INFO  main p6spy 2021-04-17 16:24:18 | 耗时 2 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel;
2021-04-17 16:24:18 INFO  main com.hero.sms.common.DatabaseCache 缓存支付通道信息
2021-04-17 16:24:18 INFO  main p6spy 2021-04-17 16:24:18 | 耗时 3 ms | SQL 语句：
SELECT id, key1, key2, min_amount, cost, key5, key3, key4, weight, remark, encrypt_key, impl_full_class, netway_code, create_time, merch_no, request_url, state_code, sign_key, callBack_url, channel_name, pay_code, max_amount FROM t_pay_channel;
2021-04-17 16:24:18 INFO  main com.hero.sms.common.DatabaseCache 缓存IP黑名单信息
2021-04-17 16:24:18 INFO  main p6spy 2021-04-17 16:24:18 | 耗时 3 ms | SQL 语句：
SELECT Id, Black_Ip, IsAvailability, LImit_Project, Description, Create_User, Remark, Create_Date FROM t_black_ip_config WHERE (IsAvailability = '1');
2021-04-17 16:24:18 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号段区域信息
2021-04-17 16:24:19 INFO  main p6spy 2021-04-17 16:24:19 | 耗时 589 ms | SQL 语句：
SELECT Id, MobileNumber, MobileArea, Province_Code, PostCode, AreaCode, Create_Date, MobileType FROM mobile_area;
2021-04-17 16:24:19 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2021-04-17 16:24:19 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2021-04-17 16:24:19 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "sms.localdomain1618301896271"'s failed in-progress jobs.
2021-04-17 16:24:19 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618647856010 started.
2021-04-17 16:24:23 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号码黑名单信息
2021-04-17 16:24:23 INFO  main p6spy 2021-04-17 16:24:23 | 耗时 4 ms | SQL 语句：
SELECT area, number FROM t_mobile_black;
2021-04-17 16:24:23 INFO  main com.hero.sms.common.DatabaseCache 缓存网关类型信息
2021-04-17 16:24:23 INFO  main com.hero.sms.common.DatabaseCache 字典缓存完成
2021-04-17 16:24:23 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2021-04-17 16:24:23 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2021-04-17 16:24:45 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2021-04-17 16:24:45 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2021-04-17 16:24:45 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2021-04-17 16:24:45 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner                                                       
2021-04-17 16:24:45 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner 短信平台启动完毕，地址：http://169.254.130.216:8808/login
2021-04-17 16:35:21 INFO  http-nio-8808-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-17 16:35:21 INFO  http-nio-8808-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2021-04-17 16:35:21 INFO  http-nio-8808-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 18 ms
2021-04-17 16:35:21 INFO  http-nio-8808-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2021-04-17 16:44:38 INFO  RMI TCP Connection(3)-127.0.0.1 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin Application shutdown requested.
2021-04-17 16:44:38 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin Application shutdown requested.
2021-04-17 16:44:38 INFO  RMI TCP Connection(3)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618647856010 paused.
2021-04-17 16:44:38 INFO  RMI TCP Connection(3)-127.0.0.1 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2021-04-17 16:44:38 INFO  RMI TCP Connection(3)-127.0.0.1 org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2021-04-17 16:44:38 INFO  RMI TCP Connection(3)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618647856010 shutting down.
2021-04-17 16:44:38 INFO  RMI TCP Connection(3)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618647856010 paused.
2021-04-17 16:44:38 INFO  RMI TCP Connection(3)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618647856010 shutdown complete.
2021-04-17 16:44:38 INFO  RMI TCP Connection(3)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2021-04-17 16:44:38 INFO  RMI TCP Connection(3)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2021-04-17 16:44:38 INFO  RMI TCP Connection(3)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2021-04-17 16:44:38 INFO  RMI TCP Connection(3)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2021-04-17 16:44:38 INFO  RMI TCP Connection(3)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2021-04-17 16:44:38 INFO  RMI TCP Connection(3)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2021-04-17 16:48:25 INFO  main com.hero.sms.SmsApplication Starting SmsApplication on LAPTOP-L07PL5KH with PID 24324 (C:\work\workspaceSmsUs\sms\sms-admin\target\classes started by payBoo in C:\work\workspaceSmsUs\sms\sms-admin)
2021-04-17 16:48:25 INFO  main com.hero.sms.SmsApplication The following profiles are active: test
2021-04-17 16:48:27 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2021-04-17 16:48:27 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2021-04-17 16:48:28 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 535ms. Found 0 repository interfaces.
2021-04-17 16:48:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$e8d61d6c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [com.hero.sms.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$a397e5b7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.hero.sms.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$6261c8a4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.hero.sms.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$74eb3d28] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$bd101935] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:29 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2021-04-17 16:48:29 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2021-04-17 16:48:29 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2021-04-17 16:48:29 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2021-04-17 16:48:29 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2021-04-17 16:48:29 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2021-04-17 16:48:29 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2021-04-17 16:48:29 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2021-04-17 16:48:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy120] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.hero.sms.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.hero.sms.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy124] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy125] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.hero.sms.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.hero.sms.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy128] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.hero.sms.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:32 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.hero.sms.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:33 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:48:34 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8808 (http)
2021-04-17 16:48:34 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8808"]
2021-04-17 16:48:34 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2021-04-17 16:48:34 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.27]
2021-04-17 16:48:34 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2021-04-17 16:48:34 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 9231 ms
2021-04-17 16:48:35 INFO  main com.hero.sms.common.xss.XssFilter ------------ xss filter init ------------
2021-04-17 16:48:37 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2021-04-17 16:48:37 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2021-04-17 16:48:37 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2021-04-17 16:48:37 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2021-04-17 16:48:37 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2021-04-17 16:48:37 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-L07PL5KH1618649317473'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2021-04-17 16:48:37 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2021-04-17 16:48:37 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2021-04-17 16:48:37 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6fa2d0b2
2021-04-17 16:48:37 INFO  main p6spy 2021-04-17 16:48:37 | 耗时 5 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2021-04-17 16:48:38 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2021-04-17 16:48:38 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2021-04-17 16:48:38 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2021-04-17 16:48:38 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2021-04-17 16:48:39 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2021-04-17 16:48:39 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2021-04-17 16:48:39 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2021-04-17 16:48:39 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Skipping initializing disabled plugin bean swagger v2.0
2021-04-17 16:48:39 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2021-04-17 16:48:39 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8808"]
2021-04-17 16:48:39 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8808 (http) with context path ''
2021-04-17 16:48:39 INFO  main com.hero.sms.SmsApplication Started SmsApplication in 15.571 seconds (JVM running for 17.892)
2021-04-17 16:48:39 INFO  main com.hero.sms.common.DatabaseCache 开始缓存字典
2021-04-17 16:48:40 INFO  main p6spy 2021-04-17 16:48:40 | 耗时 11 ms | SQL 语句：
SELECT ID, CODE, CREATE_TIME, ORDER_LEVEL, PARENT_CODE, IS_DELETE, NAME, DESCRIPTION, REMARK, SORT_CODE FROM code WHERE (IS_DELETE = '0');
2021-04-17 16:48:40 INFO  main com.hero.sms.common.DatabaseCache 缓存代理信息
2021-04-17 16:48:40 INFO  main p6spy 2021-04-17 16:48:40 | 耗时 3 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent;
2021-04-17 16:48:40 INFO  main com.hero.sms.common.DatabaseCache 缓存商户信息
2021-04-17 16:48:40 INFO  main p6spy 2021-04-17 16:48:40 | 耗时 3 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization;
2021-04-17 16:48:40 INFO  main com.hero.sms.common.DatabaseCache 缓存短信通道信息
2021-04-17 16:48:40 INFO  main p6spy 2021-04-17 16:48:40 | 耗时 4 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel;
2021-04-17 16:48:40 INFO  main com.hero.sms.common.DatabaseCache 缓存支付通道信息
2021-04-17 16:48:40 INFO  main p6spy 2021-04-17 16:48:40 | 耗时 3 ms | SQL 语句：
SELECT id, key1, key2, min_amount, cost, key5, key3, key4, weight, remark, encrypt_key, impl_full_class, netway_code, create_time, merch_no, request_url, state_code, sign_key, callBack_url, channel_name, pay_code, max_amount FROM t_pay_channel;
2021-04-17 16:48:40 INFO  main com.hero.sms.common.DatabaseCache 缓存IP黑名单信息
2021-04-17 16:48:40 INFO  main p6spy 2021-04-17 16:48:40 | 耗时 3 ms | SQL 语句：
SELECT Id, Black_Ip, IsAvailability, LImit_Project, Description, Create_User, Remark, Create_Date FROM t_black_ip_config WHERE (IsAvailability = '1');
2021-04-17 16:48:40 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号段区域信息
2021-04-17 16:48:40 INFO  main p6spy 2021-04-17 16:48:40 | 耗时 681 ms | SQL 语句：
SELECT Id, MobileNumber, MobileArea, Province_Code, PostCode, AreaCode, Create_Date, MobileType FROM mobile_area;
2021-04-17 16:48:40 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2021-04-17 16:48:40 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2021-04-17 16:48:40 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-L07PL5KH1618647856010"'s failed in-progress jobs.
2021-04-17 16:48:40 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618649317473 started.
2021-04-17 16:48:45 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号码黑名单信息
2021-04-17 16:48:45 INFO  main p6spy 2021-04-17 16:48:45 | 耗时 10 ms | SQL 语句：
SELECT area, number FROM t_mobile_black;
2021-04-17 16:48:45 INFO  main com.hero.sms.common.DatabaseCache 缓存网关类型信息
2021-04-17 16:48:45 INFO  main com.hero.sms.common.DatabaseCache 字典缓存完成
2021-04-17 16:48:45 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2021-04-17 16:48:45 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2021-04-17 16:49:08 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2021-04-17 16:49:08 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2021-04-17 16:49:08 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2021-04-17 16:49:08 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner                                                       
2021-04-17 16:49:08 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner 短信平台启动完毕，地址：http://169.254.130.216:8808/login
2021-04-17 16:51:27 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin Application shutdown requested.
2021-04-17 16:51:27 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618649317473 paused.
2021-04-17 16:51:27 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2021-04-17 16:51:27 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2021-04-17 16:51:27 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618649317473 shutting down.
2021-04-17 16:51:27 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618649317473 paused.
2021-04-17 16:51:27 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618649317473 shutdown complete.
2021-04-17 16:51:27 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2021-04-17 16:51:27 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2021-04-17 16:51:27 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2021-04-17 16:51:27 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2021-04-17 16:51:27 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2021-04-17 16:51:27 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2021-04-17 16:57:31 INFO  main com.hero.sms.SmsApplication Starting SmsApplication on LAPTOP-L07PL5KH with PID 7496 (C:\work\workspaceSmsUs\sms\sms-admin\target\classes started by payBoo in C:\work\workspaceSmsUs\sms\sms-admin)
2021-04-17 16:57:31 INFO  main com.hero.sms.SmsApplication The following profiles are active: test
2021-04-17 16:57:34 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2021-04-17 16:57:34 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2021-04-17 16:57:34 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 632ms. Found 0 repository interfaces.
2021-04-17 16:57:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$888f9351] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [com.hero.sms.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$43515b9c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.hero.sms.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$21b3e89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.hero.sms.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$14a4b30d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$5cc98f1a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:35 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2021-04-17 16:57:35 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2021-04-17 16:57:35 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2021-04-17 16:57:35 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2021-04-17 16:57:35 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2021-04-17 16:57:35 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2021-04-17 16:57:35 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2021-04-17 16:57:35 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2021-04-17 16:57:35 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:36 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy120] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.hero.sms.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.hero.sms.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy124] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:38 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy125] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.hero.sms.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.hero.sms.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy128] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.hero.sms.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:39 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.hero.sms.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:40 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 16:57:41 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8808 (http)
2021-04-17 16:57:41 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8808"]
2021-04-17 16:57:41 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2021-04-17 16:57:41 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.27]
2021-04-17 16:57:41 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2021-04-17 16:57:41 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 10017 ms
2021-04-17 16:57:42 INFO  main com.hero.sms.common.xss.XssFilter ------------ xss filter init ------------
2021-04-17 16:57:45 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2021-04-17 16:57:45 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2021-04-17 16:57:45 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2021-04-17 16:57:45 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2021-04-17 16:57:45 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2021-04-17 16:57:45 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-L07PL5KH1618649865266'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2021-04-17 16:57:45 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2021-04-17 16:57:45 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2021-04-17 16:57:45 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@45494046
2021-04-17 16:57:45 INFO  main p6spy 2021-04-17 16:57:45 | 耗时 11 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2021-04-17 16:57:46 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2021-04-17 16:57:46 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2021-04-17 16:57:46 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2021-04-17 16:57:46 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2021-04-17 16:57:47 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2021-04-17 16:57:47 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2021-04-17 16:57:47 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2021-04-17 16:57:47 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Skipping initializing disabled plugin bean swagger v2.0
2021-04-17 16:57:47 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2021-04-17 16:57:47 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8808"]
2021-04-17 16:57:47 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8808 (http) with context path ''
2021-04-17 16:57:47 INFO  main com.hero.sms.SmsApplication Started SmsApplication in 17.14 seconds (JVM running for 19.528)
2021-04-17 16:57:47 INFO  main com.hero.sms.common.DatabaseCache 开始缓存字典
2021-04-17 16:57:47 INFO  main p6spy 2021-04-17 16:57:47 | 耗时 3 ms | SQL 语句：
SELECT ID, CODE, CREATE_TIME, ORDER_LEVEL, PARENT_CODE, IS_DELETE, NAME, DESCRIPTION, REMARK, SORT_CODE FROM code WHERE (IS_DELETE = '0');
2021-04-17 16:57:47 INFO  main com.hero.sms.common.DatabaseCache 缓存代理信息
2021-04-17 16:57:47 INFO  main p6spy 2021-04-17 16:57:47 | 耗时 3 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent;
2021-04-17 16:57:47 INFO  main com.hero.sms.common.DatabaseCache 缓存商户信息
2021-04-17 16:57:47 INFO  main p6spy 2021-04-17 16:57:47 | 耗时 4 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization;
2021-04-17 16:57:47 INFO  main com.hero.sms.common.DatabaseCache 缓存短信通道信息
2021-04-17 16:57:47 INFO  main p6spy 2021-04-17 16:57:47 | 耗时 2 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel;
2021-04-17 16:57:47 INFO  main com.hero.sms.common.DatabaseCache 缓存支付通道信息
2021-04-17 16:57:47 INFO  main p6spy 2021-04-17 16:57:47 | 耗时 3 ms | SQL 语句：
SELECT id, key1, key2, min_amount, cost, key5, key3, key4, weight, remark, encrypt_key, impl_full_class, netway_code, create_time, merch_no, request_url, state_code, sign_key, callBack_url, channel_name, pay_code, max_amount FROM t_pay_channel;
2021-04-17 16:57:47 INFO  main com.hero.sms.common.DatabaseCache 缓存IP黑名单信息
2021-04-17 16:57:47 INFO  main p6spy 2021-04-17 16:57:47 | 耗时 3 ms | SQL 语句：
SELECT Id, Black_Ip, IsAvailability, LImit_Project, Description, Create_User, Remark, Create_Date FROM t_black_ip_config WHERE (IsAvailability = '1');
2021-04-17 16:57:47 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号段区域信息
2021-04-17 16:57:48 INFO  main p6spy 2021-04-17 16:57:48 | 耗时 710 ms | SQL 语句：
SELECT Id, MobileNumber, MobileArea, Province_Code, PostCode, AreaCode, Create_Date, MobileType FROM mobile_area;
2021-04-17 16:57:48 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2021-04-17 16:57:48 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2021-04-17 16:57:48 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-L07PL5KH1618649317473"'s failed in-progress jobs.
2021-04-17 16:57:48 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618649865266 started.
2021-04-17 16:57:53 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号码黑名单信息
2021-04-17 16:57:53 INFO  main p6spy 2021-04-17 16:57:53 | 耗时 2 ms | SQL 语句：
SELECT area, number FROM t_mobile_black;
2021-04-17 16:57:53 INFO  main com.hero.sms.common.DatabaseCache 缓存网关类型信息
2021-04-17 16:57:53 INFO  main com.hero.sms.common.DatabaseCache 字典缓存完成
2021-04-17 16:57:54 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2021-04-17 16:57:54 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2021-04-17 16:58:08 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2021-04-17 16:58:08 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2021-04-17 16:58:08 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2021-04-17 16:58:08 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner                                                       
2021-04-17 16:58:08 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner 短信平台启动完毕，地址：http://169.254.130.216:8808/login
2021-04-17 16:58:23 INFO  http-nio-8808-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-17 16:58:23 INFO  http-nio-8808-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2021-04-17 16:58:23 INFO  http-nio-8808-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 21 ms
2021-04-17 16:58:23 INFO  http-nio-8808-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2021-04-17 16:58:35 INFO  http-nio-8808-exec-3 com.hero.sms.common.aspect.LimitAspect IP:169.254.130.216 第 1 次访问key为 [limit_login169.254.130.216]，描述为 [登录接口] 的接口
2021-04-17 16:58:35 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 16:58:35 | 耗时 11 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.google_key, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, u.LOGIN_FAILD_COUNT, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.google_key, u.avatar, u.theme, u.is_tab;
2021-04-17 16:58:35 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 16:58:35 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.google_key, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, u.LOGIN_FAILD_COUNT, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.google_key, u.avatar, u.theme, u.is_tab;
2021-04-17 16:58:35 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 16:58:35 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET GOOGLE_KEY = 'EJ5QP4YTYV47JOQG', DESCRIPTION = '', PASSWORD = '8d8391e727c59f18b08fcfe6a045150d', MODIFY_TIME = '2020-08-25T21:48:51.000+0800', THEME = 'white', EMAIL = 'admin@qq.com', SSEX = '2', MOBILE = '18888888888', DEPT_ID = 1, AVATAR = 'gaOngJwsRYRaVAuXXcmB.png', LOGIN_FAILD_COUNT = 0, LAST_LOGIN_TIME = '2021-04-13T16:19:19.000+0800', CREATE_TIME = '2020-03-04T17:26:18.000+0800', IS_TAB = '1', STATUS = '1', USERNAME = 'admin' WHERE USER_ID = 8;
2021-04-17 16:58:35 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 16:58:35 | 耗时 4 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2021-04-17T16:58:35.310+0800', 'Chrome 89', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 'admin');
2021-04-17 16:58:35 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 16:58:35 | 耗时 1 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2021-04-17 16:58:35 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 16:58:35 | 耗时 9 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2021-04-17 16:58:35 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 16:58:35 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.google_key, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, u.LOGIN_FAILD_COUNT, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.google_key, u.avatar, u.theme, u.is_tab;
2021-04-17 16:58:38 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 16:58:38 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2021-04-17 16:58:38 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 16:58:38 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2021-04-17 16:58:38 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 16:58:38 | 耗时 6 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin') ORDER BY m.order_num;
2021-04-17 16:58:38 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 16:58:38 | 耗时 6 ms | SQL 语句：
SELECT id, message_type, message_contact, org_code, picture_url, create_User, remark, merch_read_status, admin_read_status, create_Date FROM t_message WHERE (admin_read_status = '2');
2021-04-17 16:58:39 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 16:58:39 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2021-04-17T16:58:39.150+0800' WHERE (USERNAME = 'admin');
2021-04-17 16:58:39 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 16:58:39 | 耗时 1 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2021-04-17 16:58:39 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 16:58:39 | 耗时 2 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2021-04-17 16:58:39 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 16:58:39 | 耗时 2 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2021-04-17 16:58:39 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 16:58:39 | 耗时 2 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2021-04-17 16:58:39 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 16:58:39 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'admin' GROUP BY days;
2021-04-17 16:58:39 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 16:58:39 | 耗时 4 ms | SQL 语句：
SELECT count(1) AS `value`, t.org_code AS orgCode FROM t_send_record t WHERE t.create_time > DATE_FORMAT(NOW(), '%Y-%m-%d 00:00:00') GROUP BY t.org_code ORDER BY `value` DESC LIMIT 10;
2021-04-17 16:58:39 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 16:58:39 | 耗时 4 ms | SQL 语句：
SELECT count(1) AS `value`, t.sms_number_operator AS operator FROM t_send_record t WHERE t.create_time > DATE_FORMAT(NOW(), '%Y-%m-%d 00:00:00') GROUP BY t.sms_number_operator ORDER BY `value` DESC;
2021-04-17 16:58:39 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 16:58:39 | 耗时 3 ms | SQL 语句：
SELECT count(1) AS `value`, t.sms_number_province AS province FROM t_send_record t WHERE t.create_time > DATE_FORMAT(NOW(), '%Y-%m-%d 00:00:00') GROUP BY t.sms_number_province ORDER BY `value` DESC;
2021-04-17 17:00:47 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:00:47 | 耗时 1 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:00:47 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:00:47 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:02:55 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:02:55 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:02:55 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:02:55 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:03:09 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:03:09 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:03:09 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:03:09 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:03:16 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:03:16 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:03:16 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:03:16 | 耗时 12 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:03:23 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:03:23 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:03:23 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:03:23 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:03:29 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:03:29 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:03:29 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:03:29 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:04:11 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:04:11 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:04:11 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:04:11 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:04:20 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:04:20 | 耗时 1 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:04:20 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:04:20 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:04:36 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:04:36 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:04:36 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:04:36 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:05:37 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:05:37 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:05:37 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:05:37 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:06:26 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:06:26 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:06:26 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:06:26 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:07:57 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:07:57 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:07:57 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:07:57 | 耗时 5 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:09:09 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:09:09 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:09:09 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:09:09 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:09:56 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:09:56 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:09:56 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:09:56 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:10:55 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:10:55 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:10:55 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:10:55 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:11:32 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:11:32 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:11:32 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:11:32 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:13:21 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:13:21 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:13:21 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:13:21 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:13:43 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:13:43 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:13:43 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:13:43 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:14:08 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:14:08 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:14:08 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:14:08 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:16:20 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:16:20 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:16:20 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:16:20 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:16:50 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:16:50 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:16:50 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:16:50 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:16:56 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:16:56 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800' AND audit_state <> 1);
2021-04-17 17:17:40 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:17:40 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800' AND audit_state <> 1);
2021-04-17 17:17:43 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:17:43 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:17:43 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:17:43 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:17:50 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:17:50 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:17:50 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:17:50 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:18:04 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:18:04 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:18:04 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:18:04 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:18:12 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:18:12 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:18:12 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:18:12 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:18:22 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:18:22 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:18:22 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:18:22 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:18:27 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:18:27 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:18:27 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:18:27 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:18:32 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:18:32 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:18:32 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:18:32 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:18:37 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:18:37 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:18:37 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:18:37 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:18:58 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:18:58 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:18:58 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:18:58 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:19:08 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:19:08 | 耗时 6 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2021-04-17 17:19:08 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:19:08 | 耗时 4 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2021-04-17 17:19:08 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:19:08 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.google_key, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, u.LOGIN_FAILD_COUNT, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.google_key, u.avatar, u.theme, u.is_tab;
2021-04-17 17:19:10 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:19:10 | 耗时 2 ms | SQL 语句：
SELECT id, message_type, message_contact, org_code, picture_url, create_User, remark, merch_read_status, admin_read_status, create_Date FROM t_message WHERE (admin_read_status = '2');
2021-04-17 17:19:10 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:19:10 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin') ORDER BY m.order_num;
2021-04-17 17:19:10 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:19:10 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:19:10 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:19:10 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:19:18 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:19:18 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:19:18 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:19:18 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:19:22 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:19:22 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2021-04-17 17:19:22 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:19:22 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2021-04-17 17:19:22 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:19:22 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.google_key, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, u.LOGIN_FAILD_COUNT, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.google_key, u.avatar, u.theme, u.is_tab;
2021-04-17 17:19:23 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:19:23 | 耗时 0 ms | SQL 语句：
SELECT id, message_type, message_contact, org_code, picture_url, create_User, remark, merch_read_status, admin_read_status, create_Date FROM t_message WHERE (admin_read_status = '2');
2021-04-17 17:19:23 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:19:23 | 耗时 4 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin') ORDER BY m.order_num;
2021-04-17 17:19:23 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:19:23 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:19:23 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:19:23 | 耗时 1 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:21:16 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:21:16 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:21:16 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:21:16 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:23:16 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin Application shutdown requested.
2021-04-17 17:23:16 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618649865266 paused.
2021-04-17 17:23:16 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2021-04-17 17:23:16 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2021-04-17 17:23:16 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618649865266 shutting down.
2021-04-17 17:23:16 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618649865266 paused.
2021-04-17 17:23:16 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618649865266 shutdown complete.
2021-04-17 17:23:16 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2021-04-17 17:23:16 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2021-04-17 17:23:16 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2021-04-17 17:23:16 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2021-04-17 17:23:16 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2021-04-17 17:23:16 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2021-04-17 17:30:22 INFO  main com.hero.sms.SmsApplication Starting SmsApplication on LAPTOP-L07PL5KH with PID 22724 (C:\work\workspaceSmsUs\sms\sms-admin\target\classes started by payBoo in C:\work\workspaceSmsUs\sms\sms-admin)
2021-04-17 17:30:22 INFO  main com.hero.sms.SmsApplication The following profiles are active: test
2021-04-17 17:30:24 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2021-04-17 17:30:24 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2021-04-17 17:30:25 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 519ms. Found 0 repository interfaces.
2021-04-17 17:30:25 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$ff408de4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [com.hero.sms.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$ba02562f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.hero.sms.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$78cc391c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.hero.sms.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$8b55ada0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$d37a89ad] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:26 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2021-04-17 17:30:26 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2021-04-17 17:30:26 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2021-04-17 17:30:26 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2021-04-17 17:30:26 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2021-04-17 17:30:26 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2021-04-17 17:30:26 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2021-04-17 17:30:26 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2021-04-17 17:30:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:26 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy120] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.hero.sms.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.hero.sms.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:28 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy124] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy125] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.hero.sms.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.hero.sms.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy128] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.hero.sms.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:29 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.hero.sms.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:30 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:30:31 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8808 (http)
2021-04-17 17:30:31 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8808"]
2021-04-17 17:30:31 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2021-04-17 17:30:31 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.27]
2021-04-17 17:30:31 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2021-04-17 17:30:31 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 9149 ms
2021-04-17 17:30:32 INFO  main com.hero.sms.common.xss.XssFilter ------------ xss filter init ------------
2021-04-17 17:30:34 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2021-04-17 17:30:34 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2021-04-17 17:30:34 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2021-04-17 17:30:34 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2021-04-17 17:30:34 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2021-04-17 17:30:34 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-L07PL5KH1618651834822'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2021-04-17 17:30:34 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2021-04-17 17:30:34 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2021-04-17 17:30:34 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@d1973e8
2021-04-17 17:30:35 INFO  main p6spy 2021-04-17 17:30:35 | 耗时 10 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2021-04-17 17:30:36 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2021-04-17 17:30:36 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2021-04-17 17:30:36 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2021-04-17 17:30:36 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2021-04-17 17:30:36 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2021-04-17 17:30:37 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2021-04-17 17:30:37 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2021-04-17 17:30:37 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Skipping initializing disabled plugin bean swagger v2.0
2021-04-17 17:30:37 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2021-04-17 17:30:37 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8808"]
2021-04-17 17:30:37 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8808 (http) with context path ''
2021-04-17 17:30:37 INFO  main com.hero.sms.SmsApplication Started SmsApplication in 15.925 seconds (JVM running for 18.707)
2021-04-17 17:30:37 INFO  main com.hero.sms.common.DatabaseCache 开始缓存字典
2021-04-17 17:30:37 INFO  main p6spy 2021-04-17 17:30:37 | 耗时 1 ms | SQL 语句：
SELECT ID, CODE, CREATE_TIME, ORDER_LEVEL, PARENT_CODE, IS_DELETE, NAME, DESCRIPTION, REMARK, SORT_CODE FROM code WHERE (IS_DELETE = '0');
2021-04-17 17:30:37 INFO  main com.hero.sms.common.DatabaseCache 缓存代理信息
2021-04-17 17:30:37 INFO  main p6spy 2021-04-17 17:30:37 | 耗时 1 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent;
2021-04-17 17:30:37 INFO  main com.hero.sms.common.DatabaseCache 缓存商户信息
2021-04-17 17:30:37 INFO  main p6spy 2021-04-17 17:30:37 | 耗时 1 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization;
2021-04-17 17:30:37 INFO  main com.hero.sms.common.DatabaseCache 缓存短信通道信息
2021-04-17 17:30:37 INFO  main p6spy 2021-04-17 17:30:37 | 耗时 1 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel;
2021-04-17 17:30:37 INFO  main com.hero.sms.common.DatabaseCache 缓存支付通道信息
2021-04-17 17:30:37 INFO  main p6spy 2021-04-17 17:30:37 | 耗时 1 ms | SQL 语句：
SELECT id, key1, key2, min_amount, cost, key5, key3, key4, weight, remark, encrypt_key, impl_full_class, netway_code, create_time, merch_no, request_url, state_code, sign_key, callBack_url, channel_name, pay_code, max_amount FROM t_pay_channel;
2021-04-17 17:30:37 INFO  main com.hero.sms.common.DatabaseCache 缓存IP黑名单信息
2021-04-17 17:30:37 INFO  main p6spy 2021-04-17 17:30:37 | 耗时 1 ms | SQL 语句：
SELECT Id, Black_Ip, IsAvailability, LImit_Project, Description, Create_User, Remark, Create_Date FROM t_black_ip_config WHERE (IsAvailability = '1');
2021-04-17 17:30:37 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号段区域信息
2021-04-17 17:30:38 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2021-04-17 17:30:38 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2021-04-17 17:30:38 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-L07PL5KH1618649865266"'s failed in-progress jobs.
2021-04-17 17:30:38 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618651834822 started.
2021-04-17 17:30:38 INFO  main p6spy 2021-04-17 17:30:38 | 耗时 851 ms | SQL 语句：
SELECT Id, MobileNumber, MobileArea, Province_Code, PostCode, AreaCode, Create_Date, MobileType FROM mobile_area;
2021-04-17 17:30:43 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号码黑名单信息
2021-04-17 17:30:43 INFO  main p6spy 2021-04-17 17:30:43 | 耗时 1 ms | SQL 语句：
SELECT area, number FROM t_mobile_black;
2021-04-17 17:30:43 INFO  main com.hero.sms.common.DatabaseCache 缓存网关类型信息
2021-04-17 17:30:43 INFO  main com.hero.sms.common.DatabaseCache 字典缓存完成
2021-04-17 17:30:43 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2021-04-17 17:30:43 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2021-04-17 17:30:55 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2021-04-17 17:30:55 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2021-04-17 17:30:55 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2021-04-17 17:30:55 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner                                                       
2021-04-17 17:30:55 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner 短信平台启动完毕，地址：http://169.254.130.216:8808/login
2021-04-17 17:31:03 INFO  http-nio-8808-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-17 17:31:03 INFO  http-nio-8808-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2021-04-17 17:31:03 INFO  http-nio-8808-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 14 ms
2021-04-17 17:31:03 INFO  http-nio-8808-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2021-04-17 17:31:03 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:31:03 | 耗时 13 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2021-04-17 17:31:03 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:31:03 | 耗时 6 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2021-04-17 17:31:03 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:31:03 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.google_key, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, u.LOGIN_FAILD_COUNT, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.google_key, u.avatar, u.theme, u.is_tab;
2021-04-17 17:31:06 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:31:06 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2021-04-17 17:31:06 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:31:06 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2021-04-17 17:31:06 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:31:06 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin') ORDER BY m.order_num;
2021-04-17 17:31:06 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:31:06 | 耗时 3 ms | SQL 语句：
SELECT id, message_type, message_contact, org_code, picture_url, create_User, remark, merch_read_status, admin_read_status, create_Date FROM t_message WHERE (admin_read_status = '2');
2021-04-17 17:31:06 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:31:06 | 耗时 1 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:31:06 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:31:06 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:31:12 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:31:12 | 耗时 6 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:31:12 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:31:12 | 耗时 3 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, res_msgid, channel_cost_amount, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, sub_type, up_agent_income_amount FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:31:49 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:31:49 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800' AND submit_time >= '2021-04-13T00:00:00.000+0800' AND submit_time <= '2021-04-14T00:00:00.000+0800');
2021-04-17 17:31:49 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:31:49 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, res_msgid, channel_cost_amount, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, sub_type, up_agent_income_amount FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800' AND submit_time >= '2021-04-13T00:00:00.000+0800' AND submit_time <= '2021-04-14T00:00:00.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:31:51 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:31:51 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800' AND submit_time >= '2021-04-13T00:00:00.000+0800' AND submit_time <= '2021-04-14T00:00:00.000+0800');
2021-04-17 17:31:51 INFO  Febs-Async-Thread1 p6spy 2021-04-17 17:31:51 | 耗时 4 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.statistic()', '2021-04-17T17:31:51.631+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 34, ' sendRecord: "SendRecordQuery(createStartTime=Thu Apr 01 00:00:00 CST 2021, createEndTime=Sat Apr 17 23:59:59 CST 2021, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=Tue Apr 13 00:00:00 CST 2021, submitEndTime=Wed Apr 14 00:00:00 CST 2021)"', '统计数据', 'admin');
2021-04-17 17:32:01 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:32:01 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800' AND submit_time <= '2021-04-14T00:00:00.000+0800');
2021-04-17 17:32:01 INFO  Febs-Async-Thread2 p6spy 2021-04-17 17:32:01 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.statistic()', '2021-04-17T17:32:01.665+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 13, ' sendRecord: "SendRecordQuery(createStartTime=Thu Apr 01 00:00:00 CST 2021, createEndTime=Sat Apr 17 23:59:59 CST 2021, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=Wed Apr 14 00:00:00 CST 2021)"', '统计数据', 'admin');
2021-04-17 17:32:02 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:32:02 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800' AND submit_time <= '2021-04-14T00:00:00.000+0800');
2021-04-17 17:32:02 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:32:02 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, res_msgid, channel_cost_amount, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, sub_type, up_agent_income_amount FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800' AND submit_time <= '2021-04-14T00:00:00.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:32:26 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:32:26 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:32:26 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:32:26 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, res_msgid, channel_cost_amount, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, sub_type, up_agent_income_amount FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:32:35 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:32:35 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:32:35 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:32:35 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, res_msgid, channel_cost_amount, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, sub_type, up_agent_income_amount FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:32:36 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:32:36 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:32:36 INFO  Febs-Async-Thread3 p6spy 2021-04-17 17:32:36 | 耗时 9 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.statistic()', '2021-04-17T17:32:36.726+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 11, ' sendRecord: "SendRecordQuery(createStartTime=Thu Apr 01 00:00:00 CST 2021, createEndTime=Sat Apr 17 23:59:59 CST 2021, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null)"', '统计数据', 'admin');
2021-04-17 17:32:42 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:32:42 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800' AND submit_time <= '2021-04-12T00:00:00.000+0800');
2021-04-17 17:32:42 INFO  Febs-Async-Thread4 p6spy 2021-04-17 17:32:42 | 耗时 3 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.statistic()', '2021-04-17T17:32:42.328+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 11, ' sendRecord: "SendRecordQuery(createStartTime=Thu Apr 01 00:00:00 CST 2021, createEndTime=Sat Apr 17 23:59:59 CST 2021, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=Mon Apr 12 00:00:00 CST 2021)"', '统计数据', 'admin');
2021-04-17 17:32:43 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:32:43 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800' AND submit_time <= '2021-04-12T00:00:00.000+0800');
2021-04-17 17:32:43 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:32:43 | 耗时 1 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, res_msgid, channel_cost_amount, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, sub_type, up_agent_income_amount FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800' AND submit_time <= '2021-04-12T00:00:00.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:32:59 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:32:59 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:32:59 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:32:59 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2021-04-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:33:50 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:33:50 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:33:50 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:33:50 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2021-04-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:34:40 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:34:40 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2021-04-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:34:40 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:34:40 | 耗时 2 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:35:22 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:35:22 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:35:22 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:35:22 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2021-04-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:35:42 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:35:42 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:35:42 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:35:42 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2021-04-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:35:47 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:35:47 | 耗时 60 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2020-12-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:35:47 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:35:47 | 耗时 46 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, channel_cost_amount, res_msgid, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, up_agent_income_amount FROM t_send_record_history WHERE (create_time >= '2020-12-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:36:17 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:36:17 | 耗时 1 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:36:17 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:36:17 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2021-04-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:36:23 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:36:23 | 耗时 57 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:36:23 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:36:23 | 耗时 64 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, channel_cost_amount, res_msgid, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, up_agent_income_amount FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:38:19 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:38:19 | 耗时 56 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:39:48 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:39:48 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:39:48 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:39:48 | 耗时 9 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:39:49 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:39:49 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_box WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800' AND audit_state <> 1);
2021-04-17 17:39:56 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:39:56 | 耗时 12 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:39:56 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:39:56 | 耗时 0 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, res_msgid, channel_cost_amount, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, sub_type, up_agent_income_amount FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:41:12 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:41:12 | 耗时 109 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:41:12 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:41:12 | 耗时 76 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, channel_cost_amount, res_msgid, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, up_agent_income_amount FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:41:29 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:41:29 | 耗时 95 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800' AND submit_time <= '2021-02-17T00:00:00.000+0800');
2021-04-17 17:41:29 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:41:29 | 耗时 91 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, channel_cost_amount, res_msgid, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, up_agent_income_amount FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800' AND submit_time <= '2021-02-17T00:00:00.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:41:30 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:41:30 | 耗时 90 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800' AND submit_time <= '2021-02-17T00:00:00.000+0800');
2021-04-17 17:41:30 INFO  Febs-Async-Thread5 p6spy 2021-04-17 17:41:30 | 耗时 3 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordHistoryController.statistic()', '2021-04-17T17:41:30.856+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 104, ' sendRecordHistory: SendRecordHistoryQuery(createStartTime=Tue Oct 06 00:00:00 CST 2020, createEndTime=Tue Apr 06 23:59:59 CST 2021, submitStartTime=null, submitEndTime=Wed Feb 17 00:00:00 CST 2021)', '统计数据', 'admin');
2021-04-17 17:41:38 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:41:38 | 耗时 4 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record WHERE (create_time >= '2021-04-01T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:41:38 INFO  Febs-Async-Thread1 p6spy 2021-04-17 17:41:38 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.statistic()', '2021-04-17T17:41:38.464+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 14, ' sendRecord: "SendRecordQuery(createStartTime=Thu Apr 01 00:00:00 CST 2021, createEndTime=Sat Apr 17 23:59:59 CST 2021, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null)"', '统计数据', 'admin');
2021-04-17 17:41:45 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:41:45 | 耗时 8 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2021-04-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:41:45 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:41:45 | 耗时 7 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:41:47 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:41:47 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record_history WHERE (create_time >= '2021-04-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:41:47 INFO  Febs-Async-Thread2 p6spy 2021-04-17 17:41:47 | 耗时 10 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordHistoryController.statistic()', '2021-04-17T17:41:47.313+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 10, ' sendRecordHistory: SendRecordHistoryQuery(createStartTime=Tue Apr 06 00:00:00 CST 2021, createEndTime=Tue Apr 06 23:59:59 CST 2021, submitStartTime=null, submitEndTime=null)', '统计数据', 'admin');
2021-04-17 17:42:25 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:42:25 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:42:25 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:42:25 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2021-04-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:42:37 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:42:37 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:42:37 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:42:37 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2021-04-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:42:57 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:42:57 | 耗时 48 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2021-01-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:42:57 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:42:57 | 耗时 43 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, channel_cost_amount, res_msgid, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, up_agent_income_amount FROM t_send_record_history WHERE (create_time >= '2021-01-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:42:58 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:42:58 | 耗时 59 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record_history WHERE (create_time >= '2021-01-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:42:58 INFO  Febs-Async-Thread3 p6spy 2021-04-17 17:42:58 | 耗时 3 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordHistoryController.statistic()', '2021-04-17T17:42:58.987+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 70, ' sendRecordHistory: SendRecordHistoryQuery(createStartTime=Wed Jan 06 00:00:00 CST 2021, createEndTime=Tue Apr 06 23:59:59 CST 2021, submitStartTime=null, submitEndTime=null)', '统计数据', 'admin');
2021-04-17 17:43:28 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:43:28 | 耗时 63 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record_history WHERE (create_time >= '2021-01-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800' AND submit_time <= '2021-02-01T00:00:00.000+0800');
2021-04-17 17:43:28 INFO  Febs-Async-Thread4 p6spy 2021-04-17 17:43:28 | 耗时 4 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordHistoryController.statistic()', '2021-04-17T17:43:28.870+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 69, ' sendRecordHistory: SendRecordHistoryQuery(createStartTime=Wed Jan 06 00:00:00 CST 2021, createEndTime=Tue Apr 06 23:59:59 CST 2021, submitStartTime=null, submitEndTime=Mon Feb 01 00:00:00 CST 2021)', '统计数据', 'admin');
2021-04-17 17:43:30 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:43:30 | 耗时 38 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2021-01-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800' AND submit_time <= '2021-02-01T00:00:00.000+0800');
2021-04-17 17:43:30 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:43:30 | 耗时 15 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, channel_cost_amount, res_msgid, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, up_agent_income_amount FROM t_send_record_history WHERE (create_time >= '2021-01-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800' AND submit_time <= '2021-02-01T00:00:00.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:44:08 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:44:08 | 耗时 1 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:44:08 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:44:08 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2021-04-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:44:21 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:44:21 | 耗时 78 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:44:21 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:44:21 | 耗时 68 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, channel_cost_amount, res_msgid, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, up_agent_income_amount FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:44:32 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:44:32 | 耗时 123 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800');
2021-04-17 17:44:32 INFO  Febs-Async-Thread5 p6spy 2021-04-17 17:44:32 | 耗时 3 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordHistoryController.statistic()', '2021-04-17T17:44:32.387+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 139, ' sendRecordHistory: SendRecordHistoryQuery(createStartTime=Tue Oct 06 00:00:00 CST 2020, createEndTime=Tue Apr 06 23:59:59 CST 2021, submitStartTime=null, submitEndTime=null)', '统计数据', 'admin');
2021-04-17 17:44:41 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:44:41 | 耗时 99 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800' AND submit_time >= '2021-01-31T00:00:00.000+0800');
2021-04-17 17:44:42 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:44:42 | 耗时 89 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, channel_cost_amount, res_msgid, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, up_agent_income_amount FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800' AND submit_time >= '2021-01-31T00:00:00.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:44:44 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:44:44 | 耗时 98 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800' AND submit_time >= '2021-01-31T00:00:00.000+0800');
2021-04-17 17:44:44 INFO  Febs-Async-Thread1 p6spy 2021-04-17 17:44:44 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordHistoryController.statistic()', '2021-04-17T17:44:44.298+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 110, ' sendRecordHistory: SendRecordHistoryQuery(createStartTime=Tue Oct 06 00:00:00 CST 2020, createEndTime=Tue Apr 06 23:59:59 CST 2021, submitStartTime=Sun Jan 31 00:00:00 CST 2021, submitEndTime=null)', '统计数据', 'admin');
2021-04-17 17:44:54 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:44:54 | 耗时 92 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800' AND submit_time <= '2020-10-17T00:00:00.000+0800');
2021-04-17 17:44:54 INFO  Febs-Async-Thread2 p6spy 2021-04-17 17:44:54 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordHistoryController.statistic()', '2021-04-17T17:44:54.556+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 104, ' sendRecordHistory: SendRecordHistoryQuery(createStartTime=Tue Oct 06 00:00:00 CST 2020, createEndTime=Tue Apr 06 23:59:59 CST 2021, submitStartTime=null, submitEndTime=Sat Oct 17 00:00:00 CST 2020)', '统计数据', 'admin');
2021-04-17 17:44:56 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:44:56 | 耗时 86 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800' AND submit_time <= '2020-10-17T00:00:00.000+0800');
2021-04-17 17:45:00 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:45:00 | 耗时 98 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800' AND submit_time <= '2020-12-17T00:00:00.000+0800');
2021-04-17 17:45:00 INFO  Febs-Async-Thread3 p6spy 2021-04-17 17:45:00 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordHistoryController.statistic()', '2021-04-17T17:45:00.626+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 110, ' sendRecordHistory: SendRecordHistoryQuery(createStartTime=Tue Oct 06 00:00:00 CST 2020, createEndTime=Tue Apr 06 23:59:59 CST 2021, submitStartTime=null, submitEndTime=Thu Dec 17 00:00:00 CST 2020)', '统计数据', 'admin');
2021-04-17 17:45:02 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:45:02 | 耗时 84 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800' AND submit_time <= '2020-12-17T00:00:00.000+0800');
2021-04-17 17:45:02 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:45:02 | 耗时 89 ms | SQL 语句：
SELECT id, agent_id, sms_number_province, send_code, sms_number, sms_number_area, sms_number_operator, receipt_time, org_code, channel_cost_amount, res_msgid, agent_income_amount, sms_content, sms_type, state, channel_id, up_agent_id, consume_amount, state_desc, sms_count, income_amount, source_number, submit_time, create_time, sms_words, up_agent_income_amount FROM t_send_record_history WHERE (create_time >= '2020-10-06T00:00:00.000+0800' AND create_time <= '2021-04-06T23:59:59.000+0800' AND submit_time <= '2020-12-17T00:00:00.000+0800') ORDER BY create_time DESC LIMIT 0,10;
2021-04-17 17:45:27 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:45:27 | 耗时 8 ms | SQL 语句：
SELECT COUNT(1) FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id;
2021-04-17 17:45:27 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:45:27 | 耗时 3 ms | SQL 语句：
SELECT * FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id ORDER BY cnl.id DESC LIMIT 0,10;
2021-04-17 17:46:21 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:46:21 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id WHERE cnl.state = 5;
2021-04-17 17:46:24 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:46:24 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id;
2021-04-17 17:46:24 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:46:24 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id ORDER BY cnl.id DESC LIMIT 0,10;
2021-04-17 17:47:16 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:47:16 | 耗时 3 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2021-04-17 17:48:09 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:48:09 | 耗时 11 ms | SQL 语句：
INSERT INTO t_menu (MENU_NAME, TYPE, PARENT_ID, CREATE_TIME, PERMS) VALUES ('作废通道', '1', 214, '2021-04-17T17:48:09.755+0800', 'smsChannel:invalid');
2021-04-17 17:48:09 INFO  Febs-Async-Thread4 p6spy 2021-04-17 17:48:09 | 耗时 3 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.system.controller.MenuController.addMenu()', '2021-04-17T17:48:09.777+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 22, ' menu: "Menu(menuId=386, parentId=214, menuName=作废通道, url=null, perms=smsChannel:invalid, icon=null, type=1, orderNum=null, createTime=Sat Apr 17 17:48:09 CST 2021, modifyTime=null)"', '新增菜单/按钮', 'admin');
2021-04-17 17:48:09 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:48:09 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2021-04-17 17:48:11 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:48:11 | 耗时 1 ms | SQL 语句：
SELECT MENU_ID, ICON, ORDER_NUM, MENU_NAME, TYPE, URL, PARENT_ID, MODIFY_TIME, CREATE_TIME, PERMS FROM t_menu ORDER BY ORDER_NUM ASC;
2021-04-17 17:48:11 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:48:11 | 耗时 10 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ) TOTAL;
2021-04-17 17:48:11 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:48:11 | 耗时 2 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2021-04-17 17:48:19 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:48:19 | 耗时 1 ms | SQL 语句：
UPDATE t_role SET MODIFY_TIME = '2021-04-17T17:48:19.419+0800', ROLE_NAME = '系统管理员', REMARK = '系统管理员，拥有所有操作权限 ^_^' WHERE ROLE_ID = 1;
2021-04-17 17:48:19 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:48:19 | 耗时 1 ms | SQL 语句：
DELETE FROM t_role_menu WHERE (ROLE_ID IN ('1'));
2021-04-17 17:48:19 INFO  Febs-Async-Thread5 p6spy 2021-04-17 17:48:19 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.system.controller.RoleController.updateRole()', '2021-04-17T17:48:19.512+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 93, ' role: "Role(roleId=1, roleName=系统管理员, remark=系统管理员，拥有所有操作权限 ^_^, createTime=null, modifyTime=Sat Apr 17 17:48:19 CST 2021, menuIds=1,3,11,12,13,286,160,161,4,14,15,16,162,5,17,18,19,163,6,20,21,22,164,176,177,178,179,180,181,288,289,182,183,184,185,365,366,367,368,369,370,371,374,186,195,257,287,320,380,381,187,188,189,190,191,205,219,197,198,199,294,295,306,372,192,193,258,263,303,316,318,329,338,340,341,359,200,201,202,203,211,206,305,360,361,362,207,208,209,210,220,221,222,231,194,262,227,228,229,373,375,376,377,378,379,259,260,347,382,383,261,346,384,385,300,301,302,314,325,345,213,246,279,315,354,247,280,285,298,304,317,363,364,248,281,254,256,255,242,243,244,245,274,275,276,277,290,291,292,355,356,357,348,349,350,351,212,214,297,339,352,353,386,223,224,225,226,215,216,217,218,249,250,251,252,253,307,308,309,310,311,312,313,337,344,264,278,265,266,293,330,326,331,327,335,328,336,299,332,319,333,321,334,267,268,271,282,269,272,283,270,273,284,322,323,324,2,8,23,10,24,170,136,171,172,127,128,129,131,175,101,103,104,105,106,107,108,173,109,110,174,137,138,165,139,166,115,132,133,135,134,126,159,116,117,119,121,122,123,118,125,167,168,169)"', '修改角色', 'admin');
2021-04-17 17:48:19 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:48:19 | 耗时 2 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2021-04-17 17:48:19 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:48:19 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2021-04-17 17:48:19 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:48:19 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM ( SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ) TOTAL;
2021-04-17 17:48:19 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:48:19 | 耗时 1 ms | SQL 语句：
SELECT r.role_id roleId, r.role_name roleName, r.remark, r.create_time createTime, r.modify_time modifyTime, GROUP_CONCAT(rm.menu_id) menuIds FROM t_role r LEFT JOIN t_role_menu rm ON (r.role_id = rm.role_id) WHERE 1 = 1 GROUP BY r.role_id ORDER BY createTime DESC LIMIT 0,10;
2021-04-17 17:49:27 INFO  http-nio-8808-exec-2 com.hero.sms.common.aspect.LimitAspect IP:169.254.130.216 第 1 次访问key为 [limit_login169.254.130.216]，描述为 [登录接口] 的接口
2021-04-17 17:49:27 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:49:27 | 耗时 14 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.google_key, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, u.LOGIN_FAILD_COUNT, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.google_key, u.avatar, u.theme, u.is_tab;
2021-04-17 17:49:27 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:49:27 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.google_key, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, u.LOGIN_FAILD_COUNT, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.google_key, u.avatar, u.theme, u.is_tab;
2021-04-17 17:49:27 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:49:27 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET GOOGLE_KEY = 'EJ5QP4YTYV47JOQG', DESCRIPTION = '', PASSWORD = '8d8391e727c59f18b08fcfe6a045150d', MODIFY_TIME = '2020-08-25T21:48:51.000+0800', THEME = 'white', EMAIL = 'admin@qq.com', SSEX = '2', MOBILE = '18888888888', DEPT_ID = 1, AVATAR = 'gaOngJwsRYRaVAuXXcmB.png', LOGIN_FAILD_COUNT = 0, LAST_LOGIN_TIME = '2021-04-17T16:58:39.000+0800', CREATE_TIME = '2020-03-04T17:26:18.000+0800', IS_TAB = '1', STATUS = '1', USERNAME = 'admin' WHERE USER_ID = 8;
2021-04-17 17:49:27 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:49:27 | 耗时 3 ms | SQL 语句：
INSERT INTO t_login_log (`SYSTEM`, LOGIN_TIME, BROWSER, IP, LOCATION, USERNAME) VALUES ('Windows 10', '2021-04-17T17:49:27.317+0800', 'Chrome 89', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 'admin');
2021-04-17 17:49:27 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:49:27 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2021-04-17 17:49:27 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:49:27 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2021-04-17 17:49:27 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:49:27 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.google_key, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, u.LOGIN_FAILD_COUNT, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.google_key, u.avatar, u.theme, u.is_tab;
2021-04-17 17:49:30 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:49:30 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2021-04-17 17:49:30 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:49:30 | 耗时 1 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2021-04-17 17:49:30 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:49:30 | 耗时 1 ms | SQL 语句：
SELECT id, message_type, message_contact, org_code, picture_url, create_User, remark, merch_read_status, admin_read_status, create_Date FROM t_message WHERE (admin_read_status = '2');
2021-04-17 17:49:30 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:49:30 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin') ORDER BY m.order_num;
2021-04-17 17:49:30 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:49:30 | 耗时 0 ms | SQL 语句：
UPDATE t_user SET LAST_LOGIN_TIME = '2021-04-17T17:49:30.274+0800' WHERE (USERNAME = 'admin');
2021-04-17 17:49:30 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:49:30 | 耗时 3 ms | SQL 语句：
SELECT count(1) FROM t_login_log;
2021-04-17 17:49:30 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:49:30 | 耗时 0 ms | SQL 语句：
SELECT count(1) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2021-04-17 17:49:30 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:49:30 | 耗时 0 ms | SQL 语句：
SELECT count(DISTINCT (ip)) FROM t_login_log WHERE datediff(login_time, now()) = 0;
2021-04-17 17:49:30 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:49:30 | 耗时 0 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 GROUP BY days;
2021-04-17 17:49:30 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:49:30 | 耗时 1 ms | SQL 语句：
SELECT date_format(l.login_time, '%m-%d') days, count(1) count FROM (SELECT * FROM t_login_log WHERE date_sub(curdate(), INTERVAL 10 day) <= date(login_time)) AS l WHERE 1 = 1 AND l.username = 'admin' GROUP BY days;
2021-04-17 17:49:30 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:49:30 | 耗时 1 ms | SQL 语句：
SELECT count(1) AS `value`, t.sms_number_operator AS operator FROM t_send_record t WHERE t.create_time > DATE_FORMAT(NOW(), '%Y-%m-%d 00:00:00') GROUP BY t.sms_number_operator ORDER BY `value` DESC;
2021-04-17 17:49:30 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:49:30 | 耗时 5 ms | SQL 语句：
SELECT count(1) AS `value`, t.org_code AS orgCode FROM t_send_record t WHERE t.create_time > DATE_FORMAT(NOW(), '%Y-%m-%d 00:00:00') GROUP BY t.org_code ORDER BY `value` DESC LIMIT 10;
2021-04-17 17:49:30 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:49:30 | 耗时 0 ms | SQL 语句：
SELECT count(1) AS `value`, t.sms_number_province AS province FROM t_send_record t WHERE t.create_time > DATE_FORMAT(NOW(), '%Y-%m-%d 00:00:00') GROUP BY t.sms_number_province ORDER BY `value` DESC;
2021-04-17 17:49:33 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:49:33 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id;
2021-04-17 17:49:33 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:49:33 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id ORDER BY cnl.id DESC LIMIT 0,10;
2021-04-17 17:50:34 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:50:34 | 耗时 0 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2021-04-17 17:50:34 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:50:34 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2021-04-17 17:50:34 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:50:34 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.google_key, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, u.LOGIN_FAILD_COUNT, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.google_key, u.avatar, u.theme, u.is_tab;
2021-04-17 17:50:35 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:50:35 | 耗时 0 ms | SQL 语句：
SELECT id, message_type, message_contact, org_code, picture_url, create_User, remark, merch_read_status, admin_read_status, create_Date FROM t_message WHERE (admin_read_status = '2');
2021-04-17 17:50:35 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:50:35 | 耗时 2 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin') ORDER BY m.order_num;
2021-04-17 17:50:35 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:50:35 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id;
2021-04-17 17:50:35 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:50:35 | 耗时 0 ms | SQL 语句：
SELECT * FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id ORDER BY cnl.id DESC LIMIT 0,10;
2021-04-17 17:50:44 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin Application shutdown requested.
2021-04-17 17:50:44 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618651834822 paused.
2021-04-17 17:50:44 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2021-04-17 17:50:44 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2021-04-17 17:50:44 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618651834822 shutting down.
2021-04-17 17:50:44 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618651834822 paused.
2021-04-17 17:50:44 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618651834822 shutdown complete.
2021-04-17 17:50:44 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2021-04-17 17:50:44 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2021-04-17 17:50:44 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2021-04-17 17:50:44 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2021-04-17 17:50:44 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2021-04-17 17:50:44 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
2021-04-17 17:50:59 INFO  main com.hero.sms.SmsApplication Starting SmsApplication on LAPTOP-L07PL5KH with PID 24764 (C:\work\workspaceSmsUs\sms\sms-admin\target\classes started by payBoo in C:\work\workspaceSmsUs\sms\sms-admin)
2021-04-17 17:50:59 INFO  main com.hero.sms.SmsApplication The following profiles are active: test
2021-04-17 17:51:02 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Multiple Spring Data modules found, entering strict repository configuration mode!
2021-04-17 17:51:02 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Bootstrapping Spring Data repositories in DEFAULT mode.
2021-04-17 17:51:02 INFO  main org.springframework.data.repository.config.RepositoryConfigurationDelegate Finished Spring Data repository scanning in 545ms. Found 0 repository interfaces.
2021-04-17 17:51:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$e43d3f1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'febsProperties' of type [com.hero.sms.common.properties.FebsProperties$$EnhancerBySpringCGLIB$$c9059c3c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:03 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroConfig' of type [com.hero.sms.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$87cf7f29] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'mybatisPlusConfigure' of type [com.hero.sms.common.configure.MybatisPlusConfigure$$EnhancerBySpringCGLIB$$9a58f3ad] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$e27dcfba] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:04 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource detect P6SPY plugin and enabled it
2021-04-17 17:51:04 INFO  main com.zaxxer.hikari.HikariDataSource base - Starting...
2021-04-17 17:51:04 INFO  main com.zaxxer.hikari.HikariDataSource base - Start completed.
2021-04-17 17:51:04 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Starting...
2021-04-17 17:51:04 INFO  main com.zaxxer.hikari.HikariDataSource quartz - Start completed.
2021-04-17 17:51:04 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [quartz] success
2021-04-17 17:51:04 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource - load a datasource named [base] success
2021-04-17 17:51:04 INFO  main com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource initial loaded [2] datasource,primary datasource named [base]
2021-04-17 17:51:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:04 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userMapper' of type [com.sun.proxy.$Proxy120] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy121] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userRoleServiceImpl' of type [com.hero.sms.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'userServiceImpl' of type [com.hero.sms.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMapper' of type [com.sun.proxy.$Proxy124] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy125] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleMenuServiceImpl' of type [com.hero.sms.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'roleServiceImpl' of type [com.hero.sms.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuMapper' of type [com.sun.proxy.$Proxy128] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'menuServiceImpl' of type [com.hero.sms.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:06 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'shiroRealm' of type [com.hero.sms.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'redisSessionDAO' of type [org.crazycake.shiro.RedisSessionDAO] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'sessionManager' of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:08 INFO  main org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2021-04-17 17:51:08 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat initialized with port(s): 8808 (http)
2021-04-17 17:51:08 INFO  main org.apache.coyote.http11.Http11NioProtocol Initializing ProtocolHandler ["http-nio-8808"]
2021-04-17 17:51:08 INFO  main org.apache.catalina.core.StandardService Starting service [Tomcat]
2021-04-17 17:51:08 INFO  main org.apache.catalina.core.StandardEngine Starting Servlet engine: [Apache Tomcat/9.0.27]
2021-04-17 17:51:09 INFO  main org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring embedded WebApplicationContext
2021-04-17 17:51:09 INFO  main org.springframework.web.context.ContextLoader Root WebApplicationContext: initialization completed in 9158 ms
2021-04-17 17:51:09 INFO  main com.hero.sms.common.xss.XssFilter ------------ xss filter init ------------
2021-04-17 17:51:12 INFO  main org.quartz.impl.StdSchedulerFactory Using default implementation for ThreadExecutor
2021-04-17 17:51:12 INFO  main org.quartz.core.SchedulerSignalerImpl Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2021-04-17 17:51:12 INFO  main org.quartz.core.QuartzScheduler Quartz Scheduler v.2.3.2 created.
2021-04-17 17:51:12 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore Using db table-based data access locking (synchronization).
2021-04-17 17:51:12 INFO  main org.springframework.scheduling.quartz.LocalDataSourceJobStore JobStoreCMT initialized.
2021-04-17 17:51:12 INFO  main org.quartz.core.QuartzScheduler Scheduler meta-data: Quartz Scheduler (v2.3.2) 'FEBS_Scheduler' with instanceId 'LAPTOP-L07PL5KH1618653072663'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2021-04-17 17:51:12 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler 'FEBS_Scheduler' initialized from an externally provided properties instance.
2021-04-17 17:51:12 INFO  main org.quartz.impl.StdSchedulerFactory Quartz scheduler version: 2.3.2
2021-04-17 17:51:12 INFO  main org.quartz.core.QuartzScheduler JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@69988d42
2021-04-17 17:51:12 INFO  main p6spy 2021-04-17 17:51:12 | 耗时 3 ms | SQL 语句：
SELECT job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime FROM t_job ORDER BY job_id;
2021-04-17 17:51:13 INFO  main org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver Exposing 2 endpoint(s) beneath base path '/actuator'
2021-04-17 17:51:14 INFO  main springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2021-04-17 17:51:14 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService
2021-04-17 17:51:14 INFO  main org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Initializing ExecutorService 'febsAsyncThreadPool'
2021-04-17 17:51:14 INFO  main org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping Adding welcome page template: index
2021-04-17 17:51:14 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Context refreshed
2021-04-17 17:51:14 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Found 1 custom documentation plugin(s)
2021-04-17 17:51:14 INFO  main springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper Skipping initializing disabled plugin bean swagger v2.0
2021-04-17 17:51:14 INFO  main org.springframework.scheduling.quartz.SchedulerFactoryBean Will start Quartz Scheduler [FEBS_Scheduler] in 1 seconds
2021-04-17 17:51:14 INFO  main org.apache.coyote.http11.Http11NioProtocol Starting ProtocolHandler ["http-nio-8808"]
2021-04-17 17:51:15 INFO  main org.springframework.boot.web.embedded.tomcat.TomcatWebServer Tomcat started on port(s): 8808 (http) with context path ''
2021-04-17 17:51:15 INFO  main com.hero.sms.SmsApplication Started SmsApplication in 15.803 seconds (JVM running for 18.045)
2021-04-17 17:51:15 INFO  main com.hero.sms.common.DatabaseCache 开始缓存字典
2021-04-17 17:51:15 INFO  main p6spy 2021-04-17 17:51:15 | 耗时 2 ms | SQL 语句：
SELECT ID, CODE, CREATE_TIME, ORDER_LEVEL, PARENT_CODE, IS_DELETE, NAME, DESCRIPTION, REMARK, SORT_CODE FROM code WHERE (IS_DELETE = '0');
2021-04-17 17:51:15 INFO  main com.hero.sms.common.DatabaseCache 缓存代理信息
2021-04-17 17:51:15 INFO  main p6spy 2021-04-17 17:51:15 | 耗时 4 ms | SQL 语句：
SELECT Id, Google_Key, Cash_Amount, Description, Remark, Agent_Password, Last_Login_IP, Level_Code, Available_Amount, Login_IP, EMail, Need_Bind_Google_Key, Create_Date, QQ, Up_Agent_Id, Agent_Account, Amount, Quota_Amount, Agent_Name, Login_Faild_Count, Data_MD5, Last_Login_Time, Phone_Number, Day_Limit, Send_Sms_Total, Create_User, State_Code, Pay_Password FROM t_agent;
2021-04-17 17:51:15 INFO  main com.hero.sms.common.DatabaseCache 缓存商户信息
2021-04-17 17:51:15 INFO  main p6spy 2021-04-17 17:51:15 | 耗时 3 ms | SQL 语句：
SELECT Id, Agent_Id, Sms_Approve_type, Cash_Amount, Description, Remark, interface_type, Available_Amount, Contact, Md5_Key, Sms_Sign, EMail, Create_Date, Settlement_type, Contact_Mobile, Amount, Address, Organization_Name, charges_type, Business_User_Id, Data_MD5, Bind_IP, Approve_State_Code, Organization_Code, Web_Url, Send_Sms_Total, notify_url, Create_User, Status FROM t_organization;
2021-04-17 17:51:15 INFO  main com.hero.sms.common.DatabaseCache 缓存短信通道信息
2021-04-17 17:51:15 INFO  main p6spy 2021-04-17 17:51:15 | 耗时 2 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel;
2021-04-17 17:51:15 INFO  main com.hero.sms.common.DatabaseCache 缓存支付通道信息
2021-04-17 17:51:15 INFO  main p6spy 2021-04-17 17:51:15 | 耗时 3 ms | SQL 语句：
SELECT id, key1, key2, min_amount, cost, key5, key3, key4, weight, remark, encrypt_key, impl_full_class, netway_code, create_time, merch_no, request_url, state_code, sign_key, callBack_url, channel_name, pay_code, max_amount FROM t_pay_channel;
2021-04-17 17:51:15 INFO  main com.hero.sms.common.DatabaseCache 缓存IP黑名单信息
2021-04-17 17:51:15 INFO  main p6spy 2021-04-17 17:51:15 | 耗时 3 ms | SQL 语句：
SELECT Id, Black_Ip, IsAvailability, LImit_Project, Description, Create_User, Remark, Create_Date FROM t_black_ip_config WHERE (IsAvailability = '1');
2021-04-17 17:51:15 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号段区域信息
2021-04-17 17:51:15 INFO  main p6spy 2021-04-17 17:51:15 | 耗时 576 ms | SQL 语句：
SELECT Id, MobileNumber, MobileArea, Province_Code, PostCode, AreaCode, Create_Date, MobileType FROM mobile_area;
2021-04-17 17:51:15 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.SchedulerFactoryBean Starting Quartz Scheduler now, after delay of 1 seconds
2021-04-17 17:51:15 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: detected 1 failed or restarted instances.
2021-04-17 17:51:15 INFO  Quartz Scheduler [FEBS_Scheduler] org.springframework.scheduling.quartz.LocalDataSourceJobStore ClusterManager: Scanning for instance "LAPTOP-L07PL5KH1618651834822"'s failed in-progress jobs.
2021-04-17 17:51:15 INFO  Quartz Scheduler [FEBS_Scheduler] org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618653072663 started.
2021-04-17 17:51:19 INFO  main com.hero.sms.common.DatabaseCache 缓存手机号码黑名单信息
2021-04-17 17:51:19 INFO  main p6spy 2021-04-17 17:51:19 | 耗时 3 ms | SQL 语句：
SELECT area, number FROM t_mobile_black;
2021-04-17 17:51:19 INFO  main com.hero.sms.common.DatabaseCache 缓存网关类型信息
2021-04-17 17:51:19 INFO  main com.hero.sms.common.DatabaseCache 字典缓存完成
2021-04-17 17:51:19 INFO  main io.lettuce.core.EpollProvider Starting without optional epoll library
2021-04-17 17:51:19 INFO  main io.lettuce.core.KqueueProvider Starting without optional kqueue library
2021-04-17 17:51:32 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner  __    ___   _      ___   _     ____ _____  ____ 
2021-04-17 17:51:32 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2021-04-17 17:51:32 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2021-04-17 17:51:32 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner                                                       
2021-04-17 17:51:32 INFO  main com.hero.sms.common.runner.FebsStartedUpRunner 短信平台启动完毕，地址：http://169.254.130.216:8808/login
2021-04-17 17:51:35 INFO  http-nio-8808-exec-1 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Initializing Spring DispatcherServlet 'dispatcherServlet'
2021-04-17 17:51:35 INFO  http-nio-8808-exec-1 org.springframework.web.servlet.DispatcherServlet Initializing Servlet 'dispatcherServlet'
2021-04-17 17:51:35 INFO  http-nio-8808-exec-1 org.springframework.web.servlet.DispatcherServlet Completed initialization in 20 ms
2021-04-17 17:51:35 INFO  http-nio-8808-exec-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Enabling session validation scheduler...
2021-04-17 17:51:35 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:51:35 | 耗时 16 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2021-04-17 17:51:35 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:51:35 | 耗时 6 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2021-04-17 17:51:35 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:51:35 | 耗时 3 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.email, u.mobile, u.password, u.status, u.create_time createTime, u.ssex sex, u.dept_id deptId, u.last_login_time lastLoginTime, u.modify_time modifyTime, u.description, u.google_key, u.avatar, u.theme, u.is_tab isTab, d.dept_name deptName, u.LOGIN_FAILD_COUNT, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' GROUP BY u.username, u.user_id, u.email, u.mobile, u.password, u.status, u.create_time, u.ssex, u.dept_id, u.last_login_time, u.modify_time, u.description, u.google_key, u.avatar, u.theme, u.is_tab;
2021-04-17 17:51:37 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:51:37 | 耗时 3 ms | SQL 语句：
SELECT m.* FROM t_menu m WHERE m.type <> 1 AND m.MENU_ID IN (SELECT DISTINCT rm.menu_id FROM t_role_menu rm LEFT JOIN t_role r ON (rm.role_id = r.role_id) LEFT JOIN t_user_role ur ON (ur.role_id = r.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin') ORDER BY m.order_num;
2021-04-17 17:51:37 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:51:37 | 耗时 2 ms | SQL 语句：
SELECT id, message_type, message_contact, org_code, picture_url, create_User, remark, merch_read_status, admin_read_status, create_Date FROM t_message WHERE (admin_read_status = '2');
2021-04-17 17:51:37 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:51:37 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id;
2021-04-17 17:51:37 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:51:37 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id ORDER BY cnl.id DESC LIMIT 0,10;
2021-04-17 17:51:40 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:51:40 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE id = 10;
2021-04-17 17:51:40 INFO  Febs-Async-Thread1 p6spy 2021-04-17 17:51:40 | 耗时 4 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.channel.SmsChannelController.smsChannelInvalid()', '2021-04-17T17:51:40.792+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 13, ' channelIds: "10"', '通道作废', 'admin');
2021-04-17 17:51:53 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:51:53 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE id = 9;
2021-04-17 17:51:53 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:51:53 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE id = 9;
2021-04-17 17:51:53 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:51:53 | 耗时 3 ms | SQL 语句：
UPDATE t_sms_channel SET state = 5 WHERE (state = 4 AND id = 9);
2021-04-17 17:51:53 INFO  Febs-Async-Thread2 p6spy 2021-04-17 17:51:53 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.channel.SmsChannelController.smsChannelInvalid()', '2021-04-17T17:51:53.538+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 20, ' channelIds: "9"', '通道作废', 'admin');
2021-04-17 17:51:53 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:51:53 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id;
2021-04-17 17:51:53 INFO  http-nio-8808-exec-10 p6spy 2021-04-17 17:51:53 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id ORDER BY cnl.id DESC LIMIT 0,10;
2021-04-17 17:52:02 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:52:02 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE id = 1;
2021-04-17 17:52:02 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:52:02 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE id = 1;
2021-04-17 17:52:02 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 17:52:02 | 耗时 3 ms | SQL 语句：
UPDATE t_sms_channel SET state = 2 WHERE (id = 1);
2021-04-17 17:52:02 INFO  Febs-Async-Thread3 p6spy 2021-04-17 17:52:02 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.channel.SmsChannelController.smsChannelSwitch()', '2021-04-17T17:52:02.717+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 17, ' channelIds: "1" state: "2"', '网关开/关', 'admin');
2021-04-17 17:52:02 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:52:02 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id;
2021-04-17 17:52:02 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:52:02 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id ORDER BY cnl.id DESC LIMIT 0,10;
2021-04-17 17:52:07 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:52:07 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id WHERE cnl.state = 2;
2021-04-17 17:52:07 INFO  http-nio-8808-exec-2 p6spy 2021-04-17 17:52:07 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id WHERE cnl.state = 2 ORDER BY cnl.id DESC LIMIT 0,10;
2021-04-17 17:52:09 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:52:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id WHERE cnl.state = 1;
2021-04-17 17:52:09 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:52:09 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id WHERE cnl.state = 1 ORDER BY cnl.id DESC LIMIT 0,10;
2021-04-17 17:52:11 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:52:11 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id WHERE cnl.state = 4;
2021-04-17 17:52:11 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:52:11 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id WHERE cnl.state = 4 ORDER BY cnl.id DESC LIMIT 0,10;
2021-04-17 17:52:13 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:52:13 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id WHERE cnl.state = 5;
2021-04-17 17:52:13 INFO  http-nio-8808-exec-5 p6spy 2021-04-17 17:52:13 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id WHERE cnl.state = 5 ORDER BY cnl.id DESC LIMIT 0,10;
2021-04-17 17:52:14 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:52:14 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id;
2021-04-17 17:52:14 INFO  http-nio-8808-exec-6 p6spy 2021-04-17 17:52:14 | 耗时 1 ms | SQL 语句：
SELECT * FROM t_sms_channel cnl LEFT JOIN (SELECT temp.channelId, GROUP_CONCAT(temp.`name` SEPARATOR ',') AS groupNames, GROUP_CONCAT(temp.groupId SEPARATOR ',') AS groupIds FROM (SELECT gro.group_id groupId, gro.sms_channel_id channelId, c.`NAME` AS `name` FROM t_sms_channel_group gro LEFT JOIN `code` c ON c.SORT_CODE = 'OrgGroup' AND c.`CODE` = gro.group_id) temp GROUP BY temp.channelId) channelGroup ON channelGroup.channelId = cnl.id ORDER BY cnl.id DESC LIMIT 0,10;
2021-04-17 17:52:21 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:52:21 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE id = 1;
2021-04-17 17:52:21 INFO  Febs-Async-Thread4 p6spy 2021-04-17 17:52:21 | 耗时 2 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.channel.SmsChannelController.smsChannelInvalid()', '2021-04-17T17:52:21.313+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 3, ' channelIds: "1"', '通道作废', 'admin');
2021-04-17 17:52:26 INFO  http-nio-8808-exec-8 p6spy 2021-04-17 17:52:26 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE id = 9;
2021-04-17 17:52:26 INFO  Febs-Async-Thread5 p6spy 2021-04-17 17:52:26 | 耗时 10 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.channel.SmsChannelController.smsChannelSwitch()', '2021-04-17T17:52:26.601+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 5, ' channelIds: "9" state: "1"', '网关开/关', 'admin');
2021-04-17 17:52:45 INFO  http-nio-8808-exec-9 p6spy 2021-04-17 17:52:45 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE id = 1;
2021-04-17 17:52:45 INFO  Febs-Async-Thread1 p6spy 2021-04-17 17:52:45 | 耗时 10 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.channel.SmsChannelController.smsChannelInvalid()', '2021-04-17T17:52:45.970+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 3, ' channelIds: "1"', '通道作废', 'admin');
2021-04-17 17:53:27 INFO  http-nio-8808-exec-4 p6spy 2021-04-17 17:53:27 | 耗时 0 ms | SQL 语句：
SELECT id, support_area, code, weight, description, create_user_name, remark, protocol_type, impl_full_class, day_limit, create_time, area_regex, name, state, is_del, area_operator_regex, operator_regex FROM t_sms_channel WHERE (is_del = 0);
2021-04-17 17:53:27 INFO  http-nio-8808-exec-3 p6spy 2021-04-17 17:53:27 | 耗时 3 ms | SQL 语句：
SELECT COUNT(1) FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:55:12 INFO  http-nio-8808-exec-7 p6spy 2021-04-17 17:55:12 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) AS total, COUNT(IF(state = 1, 1, NULL)) AS sortingFail, COUNT(IF(state = 2, 1, NULL)) AS waitReq, COUNT(IF(state = 4, 1, NULL)) AS reqSuccess, COUNT(IF(state = 8, 1, NULL)) AS reqFail, COUNT(IF(state = 16, 1, NULL)) AS receiptSuccess, COUNT(IF(state = 32, 1, NULL)) AS receiptFail, COALESCE((SUM(IF(state = 4, sms_count, 0)) + SUM(IF(state = 8, sms_count, 0)) + SUM(IF(state = 16, sms_count, 0)) + SUM(IF(state = 32, sms_count, 0))), 0) AS smsCount, COALESCE(SUM(consume_amount), 0) AS consumeAmount, COALESCE(SUM(channel_cost_amount), 0) AS channelCost, COALESCE(SUM(agent_income_amount + up_agent_income_amount), 0) AS agentIncomeAmount, COALESCE(SUM(agent_income_amount), 0) AS selfAgentIncomeAmount, COALESCE(SUM(up_agent_income_amount), 0) AS upAgentIncomeAmount, COALESCE(SUM(income_amount), 0) AS incomeAmount FROM t_send_record WHERE (create_time >= '2021-04-17T00:00:00.000+0800' AND create_time <= '2021-04-17T23:59:59.000+0800');
2021-04-17 17:55:12 INFO  Febs-Async-Thread2 p6spy 2021-04-17 17:55:12 | 耗时 9 ms | SQL 语句：
INSERT INTO t_log (METHOD, CREATE_TIME, IP, LOCATION, TIME, PARAMS, OPERATION, USERNAME) VALUES ('com.hero.sms.controller.message.SendRecordController.statistic()', '2021-04-17T17:55:12.822+0800', '169.254.130.216', '内网IP|0|0|内网IP|内网IP', 17, ' sendRecord: "SendRecordQuery(createStartTime=Sat Apr 17 00:00:00 CST 2021, createEndTime=Sat Apr 17 23:59:59 CST 2021, beforeApplyString=null, subTypeWith=null, searchCount=null, submitSuccessCount=null, groupId=null, isChannelIdFlag=null, isConsumeAmountFlag=null, notIsConsumeAmount=null, orderByCreateTimeWay=null, stateArray=null, submitStartTime=null, submitEndTime=null)"', '统计数据', 'admin');
2021-04-17 18:51:35 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Validating all active sessions...
2021-04-17 18:51:35 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Finished session validation.  No sessions were stopped.
2021-04-17 18:52:37 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 18:52:37 | 耗时 9 ms | SQL 语句：
SELECT r.* FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) WHERE u.username = 'admin';
2021-04-17 18:52:37 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 18:52:37 | 耗时 2 ms | SQL 语句：
SELECT m.perms FROM t_role r LEFT JOIN t_user_role ur ON (r.role_id = ur.role_id) LEFT JOIN t_user u ON (u.user_id = ur.user_id) LEFT JOIN t_role_menu rm ON (rm.role_id = r.role_id) LEFT JOIN t_menu m ON (m.menu_id = rm.menu_id) WHERE u.username = 'admin' AND m.perms IS NOT NULL AND m.perms <> '';
2021-04-17 18:52:37 INFO  http-nio-8808-exec-1 p6spy 2021-04-17 18:52:37 | 耗时 2 ms | SQL 语句：
SELECT id, message_type, message_contact, org_code, picture_url, create_User, remark, merch_read_status, admin_read_status, create_Date FROM t_message WHERE (admin_read_status = '2');
2021-04-17 19:51:35 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Validating all active sessions...
2021-04-17 19:51:35 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Finished session validation.  No sessions were stopped.
2021-04-17 20:51:35 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Validating all active sessions...
2021-04-17 20:51:35 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Finished session validation.  No sessions were stopped.
2021-04-17 21:51:35 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Validating all active sessions...
2021-04-17 21:51:35 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Finished session validation.  No sessions were stopped.
2021-04-17 22:51:35 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Validating all active sessions...
2021-04-17 22:51:35 INFO  SessionValidationThread-1 org.apache.shiro.session.mgt.AbstractValidatingSessionManager Finished session validation.  No sessions were stopped.
2021-04-17 23:17:12 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin Application shutdown requested.
2021-04-17 23:17:12 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618653072663 paused.
2021-04-17 23:17:12 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Shutting down ExecutorService 'febsAsyncThreadPool'
2021-04-17 23:17:12 INFO  RMI TCP Connection(2)-127.0.0.1 org.springframework.scheduling.quartz.SchedulerFactoryBean Shutting down Quartz Scheduler
2021-04-17 23:17:12 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618653072663 shutting down.
2021-04-17 23:17:12 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618653072663 paused.
2021-04-17 23:17:12 INFO  RMI TCP Connection(2)-127.0.0.1 org.quartz.core.QuartzScheduler Scheduler FEBS_Scheduler_$_LAPTOP-L07PL5KH1618653072663 shutdown complete.
2021-04-17 23:17:12 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource start closing ....
2021-04-17 23:17:12 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown initiated...
2021-04-17 23:17:12 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource quartz - Shutdown completed.
2021-04-17 23:17:12 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown initiated...
2021-04-17 23:17:12 INFO  RMI TCP Connection(2)-127.0.0.1 com.zaxxer.hikari.HikariDataSource base - Shutdown completed.
2021-04-17 23:17:12 INFO  RMI TCP Connection(2)-127.0.0.1 com.baomidou.dynamic.datasource.DynamicRoutingDataSource dynamic-datasource all closed success,bye
